
sx7735tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bfdc  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd6c  0800fd6c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd6c  0800fd6c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd6c  0800fd6c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd6c  0800fd6c  0001fd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd70  0800fd70  0001fd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800fd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000084  0800fdf8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  0800fdf8  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0df  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002014  00000000  00000000  0002e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000301a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001810e  00000000  00000000  00030eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e0ef  00000000  00000000  00048fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008aeb2  00000000  00000000  000570ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e1f5f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c10  00000000  00000000  000e1fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a24  00000000  00000000  000e2bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d78 	.word	0x08003d78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003d78 	.word	0x08003d78

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f8d3 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8ab 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f991 	bl	8000480 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f971 	bl	8000444 <MX_DMA_Init>
  MX_SPI1_Init();
 8000162:	f000 f8eb 	bl	800033c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000166:	f000 f91f 	bl	80003a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800016a:	f000 fe51 	bl	8000e10 <ST7735_Init>
  ST7735_Backlight_On();
 800016e:	f000 ff4d 	bl	800100c <ST7735_Backlight_On>
  HAL_TIM_Base_Start_IT(&htim2);
 8000172:	4842      	ldr	r0, [pc, #264]	; (800027c <main+0x130>)
 8000174:	f002 fdea 	bl	8002d4c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7735_FillScreen(ST7735_YELLOW);
 8000178:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800017c:	f000 ff2a 	bl	8000fd4 <ST7735_FillScreen>
	  ST7735_DrawString(0, 0, "Segoe_Print29x43", Segoe_Print29x43, ST7735_BLACK, ST7735_YELLOW);
 8000180:	4b3f      	ldr	r3, [pc, #252]	; (8000280 <main+0x134>)
 8000182:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000186:	9201      	str	r2, [sp, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	9200      	str	r2, [sp, #0]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a3d      	ldr	r2, [pc, #244]	; (8000284 <main+0x138>)
 8000190:	2100      	movs	r1, #0
 8000192:	2000      	movs	r0, #0
 8000194:	f000 fcaa 	bl	8000aec <ST7735_DrawString>
	  HAL_Delay(2000);
 8000198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800019c:	f001 f910 	bl	80013c0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_BLUE);
 80001a0:	201f      	movs	r0, #31
 80001a2:	f000 ff17 	bl	8000fd4 <ST7735_FillScreen>
	  ST7735_DrawString(0, 0, "Mistral_14x23", Mistral_14x23, ST7735_WHITE, ST7735_BLUE);
 80001a6:	4b38      	ldr	r3, [pc, #224]	; (8000288 <main+0x13c>)
 80001a8:	221f      	movs	r2, #31
 80001aa:	9201      	str	r2, [sp, #4]
 80001ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001b0:	9200      	str	r2, [sp, #0]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a35      	ldr	r2, [pc, #212]	; (800028c <main+0x140>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 fc97 	bl	8000aec <ST7735_DrawString>
	  HAL_Delay(2000);
 80001be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001c2:	f001 f8fd 	bl	80013c0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_CYAN);
 80001c6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80001ca:	f000 ff03 	bl	8000fd4 <ST7735_FillScreen>
	  ST7735_DrawString(0, 0, "BerlinSansFB_22x23",BerlinSansFB_22x23, ST7735_BLACK, ST7735_CYAN);
 80001ce:	4b30      	ldr	r3, [pc, #192]	; (8000290 <main+0x144>)
 80001d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80001d4:	9201      	str	r2, [sp, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	9200      	str	r2, [sp, #0]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a2d      	ldr	r2, [pc, #180]	; (8000294 <main+0x148>)
 80001de:	2100      	movs	r1, #0
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 fc83 	bl	8000aec <ST7735_DrawString>
	  HAL_Delay(2000);
 80001e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ea:	f001 f8e9 	bl	80013c0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_MAGENTA);
 80001ee:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80001f2:	f000 feef 	bl	8000fd4 <ST7735_FillScreen>
	  ST7735_DrawString(0, 0, "Bellmt_27x26",Bellmt_27x26, ST7735_WHITE, ST7735_MAGENTA);
 80001f6:	4b28      	ldr	r3, [pc, #160]	; (8000298 <main+0x14c>)
 80001f8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80001fc:	9201      	str	r2, [sp, #4]
 80001fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000202:	9200      	str	r2, [sp, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a25      	ldr	r2, [pc, #148]	; (800029c <main+0x150>)
 8000208:	2100      	movs	r1, #0
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fc6e 	bl	8000aec <ST7735_DrawString>
	  HAL_Delay(2000);
 8000210:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000214:	f001 f8d4 	bl	80013c0 <HAL_Delay>

	  ST7735_FillScreen(ST7735_WHITE);
 8000218:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800021c:	f000 feda 	bl	8000fd4 <ST7735_FillScreen>
	  for(r=0;r<=100;r++){
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <main+0x154>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
 8000226:	e024      	b.n	8000272 <main+0x126>
	  ST7735_DrawString(0, 0, "Count", Bellmt_27x26, ST7735_BLACK,ST7735_WHITE);
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <main+0x14c>)
 800022a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800022e:	9201      	str	r2, [sp, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	9200      	str	r2, [sp, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <main+0x158>)
 8000238:	2100      	movs	r1, #0
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fc56 	bl	8000aec <ST7735_DrawString>


	  sprintf(Str, "k=%d", r);
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0x154>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	4918      	ldr	r1, [pc, #96]	; (80002a8 <main+0x15c>)
 8000248:	4818      	ldr	r0, [pc, #96]	; (80002ac <main+0x160>)
 800024a:	f003 f95b 	bl	8003504 <siprintf>
	  ST7735_DrawString(0, 26, Str, Bellmt_27x26, ST7735_BLACK,ST7735_WHITE);
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x14c>)
 8000250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000254:	9201      	str	r2, [sp, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	9200      	str	r2, [sp, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <main+0x160>)
 800025e:	211a      	movs	r1, #26
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fc43 	bl	8000aec <ST7735_DrawString>
	  for(r=0;r<=100;r++){
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x154>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x154>)
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x154>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b64      	cmp	r3, #100	; 0x64
 8000278:	d9d6      	bls.n	8000228 <main+0xdc>
	  ST7735_FillScreen(ST7735_YELLOW);
 800027a:	e77d      	b.n	8000178 <main+0x2c>
 800027c:	200001a0 	.word	0x200001a0
 8000280:	20000008 	.word	0x20000008
 8000284:	08003df8 	.word	0x08003df8
 8000288:	2000000c 	.word	0x2000000c
 800028c:	08003db4 	.word	0x08003db4
 8000290:	20000004 	.word	0x20000004
 8000294:	08003da0 	.word	0x08003da0
 8000298:	20000000 	.word	0x20000000
 800029c:	08003d90 	.word	0x08003d90
 80002a0:	200000a0 	.word	0x200000a0
 80002a4:	08003e0c 	.word	0x08003e0c
 80002a8:	08003e14 	.word	0x08003e14
 80002ac:	200000e4 	.word	0x200000e4

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 f918 	bl	80034f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fd37 	bl	8001d6c <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000304:	f000 f95e 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f001 ffa2 	bl	800226c <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032e:	f000 f949 	bl	80005c4 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000342:	4a18      	ldr	r2, [pc, #96]	; (80003a4 <MX_SPI1_Init+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800034c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_SPI1_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800036c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000370:	2208      	movs	r2, #8
 8000372:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000388:	220a      	movs	r2, #10
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_SPI1_Init+0x64>)
 800038e:	f002 f8d5 	bl	800253c <HAL_SPI_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000398:	f000 f914 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000148 	.word	0x20000148
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003bc:	463b      	mov	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c4:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_TIM2_Init+0x98>)
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_TIM2_Init+0x98>)
 80003ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_TIM2_Init+0x98>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <MX_TIM2_Init+0x98>)
 80003dc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80003e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_TIM2_Init+0x98>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_TIM2_Init+0x98>)
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ee:	4814      	ldr	r0, [pc, #80]	; (8000440 <MX_TIM2_Init+0x98>)
 80003f0:	f002 fc5c 	bl	8002cac <HAL_TIM_Base_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003fa:	f000 f8e3 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <MX_TIM2_Init+0x98>)
 800040c:	f002 fdf8 	bl	8003000 <HAL_TIM_ConfigClockSource>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000416:	f000 f8d5 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000422:	463b      	mov	r3, r7
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_TIM2_Init+0x98>)
 8000428:	f002 ffca 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000432:	f000 f8c7 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200001a0 	.word	0x200001a0

08000444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_DMA_Init+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <MX_DMA_Init+0x38>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_DMA_Init+0x38>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	200d      	movs	r0, #13
 8000468:	f001 f8a5 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800046c:	200d      	movs	r0, #13
 800046e:	f001 f8be 	bl	80015ee <HAL_NVIC_EnableIRQ>

}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000494:	4b38      	ldr	r3, [pc, #224]	; (8000578 <MX_GPIO_Init+0xf8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a37      	ldr	r2, [pc, #220]	; (8000578 <MX_GPIO_Init+0xf8>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a31      	ldr	r2, [pc, #196]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004b2:	f043 0320 	orr.w	r3, r3, #32
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0320 	and.w	r3, r3, #32
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a2b      	ldr	r2, [pc, #172]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a25      	ldr	r2, [pc, #148]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4820      	ldr	r0, [pc, #128]	; (800057c <MX_GPIO_Init+0xfc>)
 80004fc:	f001 fc04 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	21e0      	movs	r1, #224	; 0xe0
 8000504:	481e      	ldr	r0, [pc, #120]	; (8000580 <MX_GPIO_Init+0x100>)
 8000506:	f001 fbff 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000510:	481c      	ldr	r0, [pc, #112]	; (8000584 <MX_GPIO_Init+0x104>)
 8000512:	f001 fbf9 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <MX_GPIO_Init+0xfc>)
 8000530:	f001 fa66 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000534:	23e0      	movs	r3, #224	; 0xe0
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2302      	movs	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_GPIO_Init+0x100>)
 800054c:	f001 fa58 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2302      	movs	r3, #2
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4619      	mov	r1, r3
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_GPIO_Init+0x104>)
 800056a:	f001 fa49 	bl	8001a00 <HAL_GPIO_Init>

}
 800056e:	bf00      	nop
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	40011000 	.word	0x40011000
 8000580:	40010800 	.word	0x40010800
 8000584:	40010c00 	.word	0x40010c00

08000588 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

		count++;count2++;HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005aa:	f001 fbc5 	bl	8001d38 <HAL_GPIO_TogglePin>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	200000a8 	.word	0x200000a8
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>

080005ce <ST7735_GPIO_Init>:
static void ST7735_WriteData(uint8_t* buff, size_t buff_size);
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor,uint16_t wth);
static void ST7735_GPIO_Init(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <ST7735_Reset>:

static void ST7735_Reset()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	TFT_RES_L();
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <ST7735_Reset+0x1c>)
 80005e2:	2240      	movs	r2, #64	; 0x40
 80005e4:	615a      	str	r2, [r3, #20]
	HAL_Delay(20);
 80005e6:	2014      	movs	r0, #20
 80005e8:	f000 feea 	bl	80013c0 <HAL_Delay>
	TFT_RES_H();
 80005ec:	4b02      	ldr	r3, [pc, #8]	; (80005f8 <ST7735_Reset+0x1c>)
 80005ee:	2240      	movs	r2, #64	; 0x40
 80005f0:	611a      	str	r2, [r3, #16]
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010800 	.word	0x40010800

080005fc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ST7735_WriteCommand+0x28>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	615a      	str	r2, [r3, #20]
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <ST7735_WriteCommand+0x2c>)
 8000616:	f002 f815 	bl	8002644 <HAL_SPI_Transmit>
//#endif
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010800 	.word	0x40010800
 8000628:	20000148 	.word	0x20000148

0800062c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <ST7735_WriteData+0x38>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	611a      	str	r2, [r3, #16]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <ST7735_WriteData+0x3c>)
 8000646:	f002 f939 	bl	80028bc <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 800064a:	bf00      	nop
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <ST7735_WriteData+0x3c>)
 800064e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b03      	cmp	r3, #3
 8000656:	d0f9      	beq.n	800064c <ST7735_WriteData+0x20>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40010800 	.word	0x40010800
 8000668:	20000148 	.word	0x20000148

0800066c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 800067e:	e034      	b.n	80006ea <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffb5 	bl	80005fc <ST7735_WriteCommand>

        numArgs = *addr++;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800069c:	7abb      	ldrb	r3, [r7, #10]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80006a6:	7abb      	ldrb	r3, [r7, #10]
 80006a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ac:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 80006ae:	7abb      	ldrb	r3, [r7, #10]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80006b4:	7abb      	ldrb	r3, [r7, #10]
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffb7 	bl	800062c <ST7735_WriteData>
            addr += numArgs;
 80006be:	7abb      	ldrb	r3, [r7, #10]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4413      	add	r3, r2
 80006c4:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00e      	beq.n	80006ea <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80006d6:	89bb      	ldrh	r3, [r7, #12]
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d102      	bne.n	80006e2 <ST7735_ExecuteCommandList+0x76>
 80006dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006e0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80006e2:	89bb      	ldrh	r3, [r7, #12]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe6b 	bl	80013c0 <HAL_Delay>
    while(numCommands--)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	73fa      	strb	r2, [r7, #15]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1c5      	bne.n	8000680 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	4611      	mov	r1, r2
 800070c:	461a      	mov	r2, r3
 800070e:	4623      	mov	r3, r4
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4603      	mov	r3, r0
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	460b      	mov	r3, r1
 8000718:	717b      	strb	r3, [r7, #5]
 800071a:	4613      	mov	r3, r2
 800071c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800071e:	202a      	movs	r0, #42	; 0x2a
 8000720:	f7ff ff6c 	bl	80005fc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000724:	2300      	movs	r3, #0
 8000726:	733b      	strb	r3, [r7, #12]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <ST7735_SetAddressWindow+0x88>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4413      	add	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	737b      	strb	r3, [r7, #13]
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <ST7735_SetAddressWindow+0x88>)
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	4413      	add	r3, r2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff6e 	bl	800062c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff ff53 	bl	80005fc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <ST7735_SetAddressWindow+0x8c>)
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	4413      	add	r3, r2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <ST7735_SetAddressWindow+0x8c>)
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	793b      	ldrb	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff59 	bl	800062c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800077a:	202c      	movs	r0, #44	; 0x2c
 800077c:	f7ff ff3e 	bl	80005fc <ST7735_WriteCommand>
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	200000ac 	.word	0x200000ac
 800078c:	200000ad 	.word	0x200000ad

08000790 <ST7735_WriteChar>:

//get char data from ST7735 drawstring//
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor, uint16_t wth)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4603      	mov	r3, r0
 800079a:	81fb      	strh	r3, [r7, #14]
 800079c:	460b      	mov	r3, r1
 800079e:	81bb      	strh	r3, [r7, #12]
 80007a0:	4613      	mov	r3, r2
 80007a2:	72fb      	strb	r3, [r7, #11]
	if((wth>1)&&(wth%8!=0)){
 80007a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d933      	bls.n	8000812 <ST7735_WriteChar+0x82>
 80007aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d02d      	beq.n	8000812 <ST7735_WriteChar+0x82>
	ST7735_SetAddressWindow(x, y, x+(wth), y+((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5]))-1);
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	b2dc      	uxtb	r4, r3
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	b2dd      	uxtb	r5, r3
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	b2de      	uxtb	r6, r3
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4ba4      	ldr	r3, [pc, #656]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80007d8:	3b04      	subs	r3, #4
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	440b      	add	r3, r1
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b259      	sxtb	r1, r3
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	4b9f      	ldr	r3, [pc, #636]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	3b05      	subs	r3, #5
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4403      	add	r3, r0
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	430b      	orrs	r3, r1
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4413      	add	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	3b01      	subs	r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4632      	mov	r2, r6
 8000808:	4629      	mov	r1, r5
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff ff78 	bl	8000700 <ST7735_SetAddressWindow>
 8000810:	e060      	b.n	80008d4 <ST7735_WriteChar+0x144>
	}else if(wth%8==0){
 8000812:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	b29b      	uxth	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d12f      	bne.n	800087e <ST7735_WriteChar+0xee>
	ST7735_SetAddressWindow(x, y, x+(wth-1), y+((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5]))-1);
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	b2dc      	uxtb	r4, r3
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	b2dd      	uxtb	r5, r3
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3b01      	subs	r3, #1
 8000834:	b2de      	uxtb	r6, r3
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	4b89      	ldr	r3, [pc, #548]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000844:	3b04      	subs	r3, #4
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	440b      	add	r3, r1
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b259      	sxtb	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	4b84      	ldr	r3, [pc, #528]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800085a:	3b05      	subs	r3, #5
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4403      	add	r3, r0
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	430b      	orrs	r3, r1
 8000866:	b25b      	sxtb	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4413      	add	r3, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b01      	subs	r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4632      	mov	r2, r6
 8000874:	4629      	mov	r1, r5
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff ff42 	bl	8000700 <ST7735_SetAddressWindow>
 800087c:	e02a      	b.n	80008d4 <ST7735_WriteChar+0x144>
	}else ST7735_SetAddressWindow(x, y, x+7, y+((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5]))-1);
 800087e:	89fb      	ldrh	r3, [r7, #14]
 8000880:	b2dc      	uxtb	r4, r3
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	b2dd      	uxtb	r5, r3
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	3307      	adds	r3, #7
 800088c:	b2de      	uxtb	r6, r3
 800088e:	89bb      	ldrh	r3, [r7, #12]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800089c:	3b04      	subs	r3, #4
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	440b      	add	r3, r1
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b259      	sxtb	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	4b6e      	ldr	r3, [pc, #440]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	3b05      	subs	r3, #5
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4403      	add	r3, r0
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	430b      	orrs	r3, r1
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3b01      	subs	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4632      	mov	r2, r6
 80008cc:	4629      	mov	r1, r5
 80008ce:	4620      	mov	r0, r4
 80008d0:	f7ff ff16 	bl	8000700 <ST7735_SetAddressWindow>



    f = (font.data[dmap[ch-32]]<<8)|(font.data[dmap[ch-32]-1]);
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	3b20      	subs	r3, #32
 80008da:	4962      	ldr	r1, [pc, #392]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 80008dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	021a      	lsls	r2, r3, #8
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	3b20      	subs	r3, #32
 80008ee:	485d      	ldr	r0, [pc, #372]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 80008f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80008f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80008f8:	3b01      	subs	r3, #1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	440b      	add	r3, r1
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	4313      	orrs	r3, r2
 8000902:	461a      	mov	r2, r3
 8000904:	4b58      	ldr	r3, [pc, #352]	; (8000a68 <ST7735_WriteChar+0x2d8>)
 8000906:	601a      	str	r2, [r3, #0]
    f = (f<<8)|(font.data[dmap[ch-32]-2]);
 8000908:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <ST7735_WriteChar+0x2d8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	021a      	lsls	r2, r3, #8
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	7afb      	ldrb	r3, [r7, #11]
 8000912:	3b20      	subs	r3, #32
 8000914:	4853      	ldr	r0, [pc, #332]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 8000916:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800091a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800091e:	3b02      	subs	r3, #2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	440b      	add	r3, r1
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4313      	orrs	r3, r2
 8000928:	4a4f      	ldr	r2, [pc, #316]	; (8000a68 <ST7735_WriteChar+0x2d8>)
 800092a:	6013      	str	r3, [r2, #0]

    z = (font.data[dmap[(ch+1)-32]]<<8)|(font.data[dmap[(ch+1)-32]-1]);
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7afb      	ldrb	r3, [r7, #11]
 8000930:	3b1f      	subs	r3, #31
 8000932:	494c      	ldr	r1, [pc, #304]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 8000934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	021a      	lsls	r2, r3, #8
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	3b1f      	subs	r3, #31
 8000946:	4847      	ldr	r0, [pc, #284]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 8000948:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800094c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000950:	3b01      	subs	r3, #1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	440b      	add	r3, r1
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	4313      	orrs	r3, r2
 800095a:	461a      	mov	r2, r3
 800095c:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <ST7735_WriteChar+0x2dc>)
 800095e:	601a      	str	r2, [r3, #0]
    z = (z<<8)|(font.data[dmap[(ch+1)-32]-2]);
 8000960:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <ST7735_WriteChar+0x2dc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	021a      	lsls	r2, r3, #8
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	3b1f      	subs	r3, #31
 800096c:	483d      	ldr	r0, [pc, #244]	; (8000a64 <ST7735_WriteChar+0x2d4>)
 800096e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000976:	3b02      	subs	r3, #2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	440b      	add	r3, r1
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4313      	orrs	r3, r2
 8000980:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <ST7735_WriteChar+0x2dc>)
 8000982:	6013      	str	r3, [r2, #0]

    for(i = f; i < z; i++)
 8000984:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <ST7735_WriteChar+0x2d8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <ST7735_WriteChar+0x2e0>)
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e09a      	b.n	8000ac4 <ST7735_WriteChar+0x334>
    {
       b = font.data[i];//array adress
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <ST7735_WriteChar+0x2e0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <ST7735_WriteChar+0x2e4>)
 800099e:	601a      	str	r2, [r3, #0]
       if(wth>1){
 80009a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d935      	bls.n	8000a12 <ST7735_WriteChar+0x282>
       if(((wth-v)>=8)&&(wth%8!=0)){
 80009a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80009a8:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d913      	bls.n	80009da <ST7735_WriteChar+0x24a>
 80009b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00d      	beq.n	80009da <ST7735_WriteChar+0x24a>
            ct=8;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <ST7735_WriteChar+0x2ec>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	601a      	str	r2, [r3, #0]
            v+=8;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3308      	adds	r3, #8
 80009ca:	4a2b      	ldr	r2, [pc, #172]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 80009cc:	6013      	str	r3, [r2, #0]
            cnt++;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <ST7735_WriteChar+0x2f0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <ST7735_WriteChar+0x2f0>)
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e01e      	b.n	8000a18 <ST7735_WriteChar+0x288>
        }else if(((wth-v)<8)&&(cnt==(wth/8))){
 80009da:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d818      	bhi.n	8000a18 <ST7735_WriteChar+0x288>
 80009e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <ST7735_WriteChar+0x2f0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d110      	bne.n	8000a18 <ST7735_WriteChar+0x288>
            ct=(wth-v)+1;
 80009f6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <ST7735_WriteChar+0x2ec>)
 8000a02:	6013      	str	r3, [r2, #0]
            v=0;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <ST7735_WriteChar+0x2e8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
            cnt=0;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <ST7735_WriteChar+0x2f0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e002      	b.n	8000a18 <ST7735_WriteChar+0x288>
        }
       }else ct=8;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <ST7735_WriteChar+0x2ec>)
 8000a14:	2208      	movs	r2, #8
 8000a16:	601a      	str	r2, [r3, #0]
       if(wth%8==0)ct=8;
 8000a18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <ST7735_WriteChar+0x29a>
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <ST7735_WriteChar+0x2ec>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	601a      	str	r2, [r3, #0]
        for(j = 0; j < ct; j++)
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <ST7735_WriteChar+0x2f4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e03d      	b.n	8000aae <ST7735_WriteChar+0x31e>
        {

        	////////////////// plot  //////////////////////////////
            if((b >> j) & 0x01)// if logic 1 in bitmap plot a glyph
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <ST7735_WriteChar+0x2e4>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <ST7735_WriteChar+0x2f4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d020      	beq.n	8000a88 <ST7735_WriteChar+0x2f8>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	753b      	strb	r3, [r7, #20]
 8000a50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	757b      	strb	r3, [r7, #21]
                ST7735_WriteData(data, sizeof(data));
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fde5 	bl	800062c <ST7735_WriteData>
 8000a62:	e01f      	b.n	8000aa4 <ST7735_WriteChar+0x314>
 8000a64:	2000022c 	.word	0x2000022c
 8000a68:	200000c0 	.word	0x200000c0
 8000a6c:	200000bc 	.word	0x200000bc
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	200000b4 	.word	0x200000b4
 8000a78:	200000cc 	.word	0x200000cc
 8000a7c:	200000c8 	.word	0x200000c8
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	200000b8 	.word	0x200000b8
            }
            else// if logic 0 in bitmap plot a background
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	743b      	strb	r3, [r7, #16]
 8000a92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fdc4 	bl	800062c <ST7735_WriteData>
        for(j = 0; j < ct; j++)
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <ST7735_WriteChar+0x34c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <ST7735_WriteChar+0x34c>)
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <ST7735_WriteChar+0x34c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <ST7735_WriteChar+0x350>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d3bb      	bcc.n	8000a32 <ST7735_WriteChar+0x2a2>
    for(i = f; i < z; i++)
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <ST7735_WriteChar+0x354>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <ST7735_WriteChar+0x354>)
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <ST7735_WriteChar+0x354>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <ST7735_WriteChar+0x358>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f4ff af5e 	bcc.w	800098e <ST7735_WriteChar+0x1fe>
        }



    }
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000adc:	200000b8 	.word	0x200000b8
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	200000bc 	.word	0x200000bc

08000aec <ST7735_DrawString>:


void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af04      	add	r7, sp, #16
 8000af2:	60ba      	str	r2, [r7, #8]
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4603      	mov	r3, r0
 8000af8:	81fb      	strh	r3, [r7, #14]
 8000afa:	460b      	mov	r3, r1
 8000afc:	81bb      	strh	r3, [r7, #12]
	TFT_CS_L();//cs pin low
 8000afe:	4b7d      	ldr	r3, [pc, #500]	; (8000cf4 <ST7735_DrawString+0x208>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	615a      	str	r2, [r3, #20]
    if(t==0){
 8000b04:	4b7c      	ldr	r3, [pc, #496]	; (8000cf8 <ST7735_DrawString+0x20c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f040 8152 	bne.w	8000db2 <ST7735_DrawString+0x2c6>
	for(z=11;z<=387;z+=4)
 8000b0e:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b10:	220b      	movs	r2, #11
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e010      	b.n	8000b38 <ST7735_DrawString+0x4c>
      {
        dmap[f] = z;
 8000b16:	4b7a      	ldr	r3, [pc, #488]	; (8000d00 <ST7735_DrawString+0x214>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a78      	ldr	r2, [pc, #480]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	4979      	ldr	r1, [pc, #484]	; (8000d04 <ST7735_DrawString+0x218>)
 8000b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    f++;
 8000b24:	4b76      	ldr	r3, [pc, #472]	; (8000d00 <ST7735_DrawString+0x214>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a75      	ldr	r2, [pc, #468]	; (8000d00 <ST7735_DrawString+0x214>)
 8000b2c:	6013      	str	r3, [r2, #0]
	for(z=11;z<=387;z+=4)
 8000b2e:	4b73      	ldr	r3, [pc, #460]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3304      	adds	r3, #4
 8000b34:	4a71      	ldr	r2, [pc, #452]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8000b40:	d3e9      	bcc.n	8000b16 <ST7735_DrawString+0x2a>
	  }
	f=0;
 8000b42:	4b6f      	ldr	r3, [pc, #444]	; (8000d00 <ST7735_DrawString+0x214>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
	z=0;
 8000b48:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <ST7735_DrawString+0x210>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
	t++;
 8000b4e:	4b6a      	ldr	r3, [pc, #424]	; (8000cf8 <ST7735_DrawString+0x20c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a68      	ldr	r2, [pc, #416]	; (8000cf8 <ST7735_DrawString+0x20c>)
 8000b56:	6013      	str	r3, [r2, #0]
    }

    while(*str)
 8000b58:	e12b      	b.n	8000db2 <ST7735_DrawString+0x2c6>
    {
       if(*str!=32){
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b20      	cmp	r3, #32
 8000b60:	f000 8089 	beq.w	8000c76 <ST7735_DrawString+0x18a>
    	d = font.data[dmap[(*str)-32]-3];
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	3b20      	subs	r3, #32
 8000b6c:	4965      	ldr	r1, [pc, #404]	; (8000d04 <ST7735_DrawString+0x218>)
 8000b6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	3b03      	subs	r3, #3
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b61      	ldr	r3, [pc, #388]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000b82:	601a      	str	r2, [r3, #0]
        b=d;
 8000b84:	4b60      	ldr	r3, [pc, #384]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a60      	ldr	r2, [pc, #384]	; (8000d0c <ST7735_DrawString+0x220>)
 8000b8a:	6013      	str	r3, [r2, #0]
    	if(d==1){
 8000b8c:	4b5e      	ldr	r3, [pc, #376]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d102      	bne.n	8000b9a <ST7735_DrawString+0xae>
    		b=8;
 8000b94:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <ST7735_DrawString+0x220>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	601a      	str	r2, [r3, #0]
    	}

    	/* limit and newline check */
        if(x+b  >= _width)
 8000b9a:	89fa      	ldrh	r2, [r7, #14]
 8000b9c:	4b5b      	ldr	r3, [pc, #364]	; (8000d0c <ST7735_DrawString+0x220>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <ST7735_DrawString+0x224>)
 8000ba4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d338      	bcc.n	8000c1e <ST7735_DrawString+0x132>
        {
            x = 0;//set x = 0
 8000bac:	2300      	movs	r3, #0
 8000bae:	81fb      	strh	r3, [r7, #14]
            y += ((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5]));//enter newline
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <ST7735_DrawString+0x218>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <ST7735_DrawString+0x218>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000bd0:	3b05      	subs	r3, #5
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	440b      	add	r3, r1
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	81bb      	strh	r3, [r7, #12]

            ///////////////////////////////////////////////////////////////////////////////////////
            if(y + ((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5])) >= _height)
 8000be6:	89ba      	ldrh	r2, [r7, #12]
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <ST7735_DrawString+0x218>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	0219      	lsls	r1, r3, #8
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <ST7735_DrawString+0x218>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	3b05      	subs	r3, #5
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4403      	add	r3, r0
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	4413      	add	r3, r2
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <ST7735_DrawString+0x228>)
 8000c14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	f280 80d0 	bge.w	8000dbe <ST7735_DrawString+0x2d2>
            }

        }


        ST7735_WriteChar(x, y, *str, font, color, bgcolor, d);//plot
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	89b9      	ldrh	r1, [r7, #12]
 8000c2a:	89f8      	ldrh	r0, [r7, #14]
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f7ff fdaa 	bl	8000790 <ST7735_WriteChar>
        if(d==1){
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d102      	bne.n	8000c4a <ST7735_DrawString+0x15e>
          d=7;
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c46:	2207      	movs	r2, #7
 8000c48:	601a      	str	r2, [r3, #0]
        }
        if(d%8!=0){
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d008      	beq.n	8000c68 <ST7735_DrawString+0x17c>
          x += (d+1);//
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	81fb      	strh	r3, [r7, #14]
 8000c66:	e0a1      	b.n	8000dac <ST7735_DrawString+0x2c0>
        }else{
          x += d;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <ST7735_DrawString+0x21c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4413      	add	r3, r2
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	e09a      	b.n	8000dac <ST7735_DrawString+0x2c0>
        }
       }else{
    	  ST7735_SetAddressWindow(x, y, x+((font.data[dmap[55]-3])/2)-1, y+((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5]))-1);
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	b2dc      	uxtb	r4, r3
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	b2dd      	uxtb	r5, r3
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <ST7735_DrawString+0x218>)
 8000c86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000c8e:	3b03      	subs	r3, #3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	440b      	add	r3, r1
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2de      	uxtb	r6, r3
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <ST7735_DrawString+0x218>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b259      	sxtb	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <ST7735_DrawString+0x218>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000cc8:	3b05      	subs	r3, #5
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4403      	add	r3, r0
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4632      	mov	r2, r6
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fd0b 	bl	8000700 <ST7735_SetAddressWindow>
          for(z=0;z<(((font.data[dmap[55]-3])/2)*((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5])));z++){
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <ST7735_DrawString+0x210>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e025      	b.n	8000d3e <ST7735_DrawString+0x252>
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	200000d4 	.word	0x200000d4
 8000cfc:	200000bc 	.word	0x200000bc
 8000d00:	200000c0 	.word	0x200000c0
 8000d04:	2000022c 	.word	0x2000022c
 8000d08:	200000c4 	.word	0x200000c4
 8000d0c:	200000b4 	.word	0x200000b4
 8000d10:	20000012 	.word	0x20000012
 8000d14:	20000010 	.word	0x20000010
        	  uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000d18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	753b      	strb	r3, [r7, #20]
 8000d22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	757b      	strb	r3, [r7, #21]
        	  ST7735_WriteData(data, sizeof(data));
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fc7c 	bl	800062c <ST7735_WriteData>
          for(z=0;z<(((font.data[dmap[55]-3])/2)*((font.data[dmap[0]-4]<<8)|(font.data[dmap[0]-5])));z++){
 8000d34:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <ST7735_DrawString+0x314>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <ST7735_DrawString+0x314>)
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <ST7735_DrawString+0x318>)
 8000d42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000d4a:	3b03      	subs	r3, #3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <ST7735_DrawString+0x318>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000d62:	3b04      	subs	r3, #4
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	021a      	lsls	r2, r3, #8
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <ST7735_DrawString+0x318>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000d76:	3b05      	subs	r3, #5
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	440b      	add	r3, r1
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	fb03 f300 	mul.w	r3, r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <ST7735_DrawString+0x314>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8c4      	bhi.n	8000d18 <ST7735_DrawString+0x22c>
          }

           x+=((font.data[dmap[55]-3])/2);
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <ST7735_DrawString+0x318>)
 8000d92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000d9a:	3b03      	subs	r3, #3
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	085b      	lsrs	r3, r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	4413      	add	r3, r2
 8000daa:	81fb      	strh	r3, [r7, #14]

       }
        str++;//nextchar
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
    while(*str)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f47f aecf 	bne.w	8000b5a <ST7735_DrawString+0x6e>
 8000dbc:	e000      	b.n	8000dc0 <ST7735_DrawString+0x2d4>
                break;
 8000dbe:	bf00      	nop
    }
    ST7735_WriteChar(x+b, y, 32, font, color, bgcolor,font.data[dmap[0]-3]);
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <ST7735_DrawString+0x31c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <ST7735_DrawString+0x318>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000dd6:	3b03      	subs	r3, #3
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	89b9      	ldrh	r1, [r7, #12]
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2220      	movs	r2, #32
 8000dee:	f7ff fccf 	bl	8000790 <ST7735_WriteChar>
    TFT_CS_H();//cs pin high
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <ST7735_DrawString+0x320>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	611a      	str	r2, [r3, #16]

}
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	2000022c 	.word	0x2000022c
 8000e08:	200000b4 	.word	0x200000b4
 8000e0c:	40010800 	.word	0x40010800

08000e10 <ST7735_Init>:


void ST7735_Init()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000e14:	f7ff fbdb 	bl	80005ce <ST7735_GPIO_Init>
	TFT_CS_L();
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <ST7735_Init+0x30>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	615a      	str	r2, [r3, #20]
    ST7735_Reset();
 8000e1e:	f7ff fbdd 	bl	80005dc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <ST7735_Init+0x34>)
 8000e24:	f7ff fc22 	bl	800066c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <ST7735_Init+0x38>)
 8000e2a:	f7ff fc1f 	bl	800066c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <ST7735_Init+0x3c>)
 8000e30:	f7ff fc1c 	bl	800066c <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <ST7735_Init+0x30>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010800 	.word	0x40010800
 8000e44:	0800fcb0 	.word	0x0800fcb0
 8000e48:	0800fcec 	.word	0x0800fcec
 8000e4c:	0800fcfc 	.word	0x0800fcfc

08000e50 <ST7735_FillRectangle>:
}



void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4623      	mov	r3, r4
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	4603      	mov	r3, r0
 8000e64:	80bb      	strh	r3, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	803b      	strh	r3, [r7, #0]
 8000e6e:	466b      	mov	r3, sp
 8000e70:	461d      	mov	r5, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4a53      	ldr	r2, [pc, #332]	; (8000fc4 <ST7735_FillRectangle+0x174>)
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	da05      	bge.n	8000e8a <ST7735_FillRectangle+0x3a>
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <ST7735_FillRectangle+0x178>)
 8000e82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	db01      	blt.n	8000e8e <ST7735_FillRectangle+0x3e>
 8000e8a:	46ad      	mov	sp, r5
 8000e8c:	e096      	b.n	8000fbc <ST7735_FillRectangle+0x16c>
        return;
    if ((x + w - 1) >= _width)
 8000e8e:	88fa      	ldrh	r2, [r7, #6]
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <ST7735_FillRectangle+0x174>)
 8000e96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	dd06      	ble.n	8000eac <ST7735_FillRectangle+0x5c>
        w = _width - x;
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <ST7735_FillRectangle+0x174>)
 8000ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height)
 8000eac:	88ba      	ldrh	r2, [r7, #4]
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <ST7735_FillRectangle+0x178>)
 8000eb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	dd06      	ble.n	8000eca <ST7735_FillRectangle+0x7a>
        h = _height - y;
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <ST7735_FillRectangle+0x178>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <ST7735_FillRectangle+0x17c>)
 8000ecc:	2220      	movs	r2, #32
 8000ece:	615a      	str	r2, [r3, #20]
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2d8      	uxtb	r0, r3
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	b2d9      	uxtb	r1, r3
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b2dc      	uxtb	r4, r3
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	883b      	ldrh	r3, [r7, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4622      	mov	r2, r4
 8000efa:	f7ff fc01 	bl	8000700 <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 8000efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	723b      	strb	r3, [r7, #8]
 8000f08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	727b      	strb	r3, [r7, #9]
    TFT_DC_D();
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <ST7735_FillRectangle+0x17c>)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	611a      	str	r2, [r3, #16]

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	005c      	lsls	r4, r3, #1
 8000f18:	1e63      	subs	r3, r4, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4623      	mov	r3, r4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	00cb      	lsls	r3, r1, #3
 8000f2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f32:	00c2      	lsls	r2, r0, #3
 8000f34:	4623      	mov	r3, r4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f04f 0100 	mov.w	r1, #0
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	00cb      	lsls	r3, r1, #3
 8000f46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f4a:	00c2      	lsls	r2, r0, #3
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	3307      	adds	r3, #7
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	ebad 0d03 	sub.w	sp, sp, r3
 8000f58:	466b      	mov	r3, sp
 8000f5a:	3300      	adds	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
    for (y = h; y > 0; y--) {
 8000f5e:	883b      	ldrh	r3, [r7, #0]
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	e024      	b.n	8000fae <ST7735_FillRectangle+0x15e>
        for (int x = w * 2; x >= 0; x -= 2) {
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e00d      	b.n	8000f88 <ST7735_FillRectangle+0x138>
            tbuf[x] = data[0];
 8000f6c:	7a39      	ldrb	r1, [r7, #8]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	460a      	mov	r2, r1
 8000f76:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	7a79      	ldrb	r1, [r7, #9]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3b02      	subs	r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	daee      	bge.n	8000f6c <ST7735_FillRectangle+0x11c>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	b2a2      	uxth	r2, r4
 8000f92:	4619      	mov	r1, r3
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <ST7735_FillRectangle+0x180>)
 8000f96:	f001 fc91 	bl	80028bc <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 8000f9a:	bf00      	nop
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <ST7735_FillRectangle+0x180>)
 8000f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d0f9      	beq.n	8000f9c <ST7735_FillRectangle+0x14c>
    for (y = h; y > 0; y--) {
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1d7      	bne.n	8000f64 <ST7735_FillRectangle+0x114>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <ST7735_FillRectangle+0x17c>)
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	46ad      	mov	sp, r5
}
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000012 	.word	0x20000012
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	20000148 	.word	0x20000148

08000fd4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <ST7735_FillScreen+0x30>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ST7735_FillScreen+0x34>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff ff2a 	bl	8000e50 <ST7735_FillRectangle>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000012 	.word	0x20000012
 8001008:	20000010 	.word	0x20000010

0800100c <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	TFT_BL_H();
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <ST7735_Backlight_On+0x14>)
 8001012:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001016:	611a      	str	r2, [r3, #16]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40010c00 	.word	0x40010c00

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_MspInit+0x5c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_MspInit+0x5c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_MspInit+0x5c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x5c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x5c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x5c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_MspInit+0x60>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_MspInit+0x60>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HAL_SPI_MspInit+0xd8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d157      	bne.n	8001158 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_SPI_MspInit+0xdc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010d8:	2328      	movs	r3, #40	; 0x28
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	481f      	ldr	r0, [pc, #124]	; (8001168 <HAL_SPI_MspInit+0xe0>)
 80010ec:	f000 fc88 	bl	8001a00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_SPI_MspInit+0xe4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_SPI_MspInit+0xe4>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 800110e:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_SPI_MspInit+0xec>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001114:	2210      	movs	r2, #16
 8001116:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 800113e:	f000 fa71 	bl	8001624 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001148:	f7ff fa3c 	bl	80005c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001150:	649a      	str	r2, [r3, #72]	; 0x48
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_SPI_MspInit+0xe8>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40013000 	.word	0x40013000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010c00 	.word	0x40010c00
 800116c:	40010000 	.word	0x40010000
 8001170:	200001e8 	.word	0x200001e8
 8001174:	40020030 	.word	0x40020030

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d113      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	201c      	movs	r0, #28
 80011a8:	f000 fa05 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ac:	201c      	movs	r0, #28
 80011ae:	f000 fa1e 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f000 f8bf 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel3_IRQHandler+0x10>)
 8001216:	f000 fabf 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001e8 	.word	0x200001e8

08001224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM2_IRQHandler+0x10>)
 800122a:	f001 fde1 	bl	8002df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001a0 	.word	0x200001a0

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f002 f91a 	bl	80034a0 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20005000 	.word	0x20005000
 8001298:	00000400 	.word	0x00000400
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	200003c8 	.word	0x200003c8

080012a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012d6:	f7ff ffe5 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f002 f8e7 	bl	80034ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7fe ff35 	bl	800014c <main>
  bx lr
 80012e2:	4770      	bx	lr
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80012ec:	0800fd74 	.word	0x0800fd74
  ldr r2, =_sbss
 80012f0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80012f4:	200003c4 	.word	0x200003c4

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f947 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fe84 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f95f 	bl	800160a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f927 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000014 	.word	0x20000014
 8001380:	2000001c 	.word	0x2000001c
 8001384:	20000018 	.word	0x20000018

08001388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_IncTick+0x20>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_IncTick+0x20>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	2000001c 	.word	0x2000001c
 80013a8:	200003b0 	.word	0x200003b0

080013ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_GetTick+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	200003b0 	.word	0x200003b0

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff fff0 	bl	80013ac <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffe0 	bl	80013ac <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000001c 	.word	0x2000001c

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4906      	ldr	r1, [pc, #24]	; (80014a0 <__NVIC_EnableIRQ+0x34>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff90 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff2d 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff42 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff35 	bl	800146c <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e043      	b.n	80016c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_DMA_Init+0xa8>)
 8001642:	4413      	add	r3, r2
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_DMA_Init+0xac>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	009a      	lsls	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_DMA_Init+0xb0>)
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800166e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001672:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	bffdfff8 	.word	0xbffdfff8
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	40020000 	.word	0x40020000

080016d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_DMA_Start_IT+0x20>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e04a      	b.n	800178e <HAL_DMA_Start_IT+0xb6>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001706:	2b01      	cmp	r3, #1
 8001708:	d13a      	bne.n	8001780 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2202      	movs	r2, #2
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f938 	bl	80019a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 020e 	orr.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e00f      	b.n	800176e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0204 	bic.w	r2, r2, #4
 800175c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 020a 	orr.w	r2, r2, #10
 800176c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e005      	b.n	800178c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001788:	2302      	movs	r3, #2
 800178a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	2204      	movs	r2, #4
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d04f      	beq.n	8001860 <HAL_DMA_IRQHandler+0xc8>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d04a      	beq.n	8001860 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0204 	bic.w	r2, r2, #4
 80017e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_DMA_IRQHandler+0x1f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d029      	beq.n	8001846 <HAL_DMA_IRQHandler+0xae>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_DMA_IRQHandler+0x1f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <HAL_DMA_IRQHandler+0xaa>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_DMA_IRQHandler+0x1f8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01a      	beq.n	800183c <HAL_DMA_IRQHandler+0xa4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a62      	ldr	r2, [pc, #392]	; (8001994 <HAL_DMA_IRQHandler+0x1fc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d012      	beq.n	8001836 <HAL_DMA_IRQHandler+0x9e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_DMA_IRQHandler+0x200>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00a      	beq.n	8001830 <HAL_DMA_IRQHandler+0x98>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5f      	ldr	r2, [pc, #380]	; (800199c <HAL_DMA_IRQHandler+0x204>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <HAL_DMA_IRQHandler+0x92>
 8001824:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001828:	e00e      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 800182a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800182e:	e00b      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 8001830:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001834:	e008      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 8001836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800183a:	e005      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 800183c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001840:	e002      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 8001842:	2340      	movs	r3, #64	; 0x40
 8001844:	e000      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
 8001846:	2304      	movs	r3, #4
 8001848:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_DMA_IRQHandler+0x208>)
 800184a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8094 	beq.w	800197e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800185e:	e08e      	b.n	800197e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2202      	movs	r2, #2
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d056      	beq.n	800191e <HAL_DMA_IRQHandler+0x186>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d051      	beq.n	800191e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 020a 	bic.w	r2, r2, #10
 8001896:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_DMA_IRQHandler+0x1f0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d029      	beq.n	80018fe <HAL_DMA_IRQHandler+0x166>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a37      	ldr	r2, [pc, #220]	; (800198c <HAL_DMA_IRQHandler+0x1f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <HAL_DMA_IRQHandler+0x162>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a35      	ldr	r2, [pc, #212]	; (8001990 <HAL_DMA_IRQHandler+0x1f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01a      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x15c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a34      	ldr	r2, [pc, #208]	; (8001994 <HAL_DMA_IRQHandler+0x1fc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d012      	beq.n	80018ee <HAL_DMA_IRQHandler+0x156>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_DMA_IRQHandler+0x200>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00a      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x150>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <HAL_DMA_IRQHandler+0x204>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <HAL_DMA_IRQHandler+0x14a>
 80018dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e0:	e00e      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e6:	e00b      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	e008      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	e005      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f8:	e002      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018fa:	2320      	movs	r3, #32
 80018fc:	e000      	b.n	8001900 <HAL_DMA_IRQHandler+0x168>
 80018fe:	2302      	movs	r3, #2
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_DMA_IRQHandler+0x208>)
 8001902:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d034      	beq.n	800197e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800191c:	e02f      	b.n	800197e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d028      	beq.n	8001980 <HAL_DMA_IRQHandler+0x1e8>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020e 	bic.w	r2, r2, #14
 8001946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
    }
  }
  return;
 800197e:	bf00      	nop
 8001980:	bf00      	nop
}
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40020008 	.word	0x40020008
 800198c:	4002001c 	.word	0x4002001c
 8001990:	40020030 	.word	0x40020030
 8001994:	40020044 	.word	0x40020044
 8001998:	40020058 	.word	0x40020058
 800199c:	4002006c 	.word	0x4002006c
 80019a0:	40020000 	.word	0x40020000

080019a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d108      	bne.n	80019e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019e2:	e007      	b.n	80019f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e169      	b.n	8001ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a14:	2201      	movs	r2, #1
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8158 	bne.w	8001ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a9a      	ldr	r2, [pc, #616]	; (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d05e      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a3c:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d875      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a42:	4a98      	ldr	r2, [pc, #608]	; (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d058      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a48:	4a96      	ldr	r2, [pc, #600]	; (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d86f      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a4e:	4a96      	ldr	r2, [pc, #600]	; (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d052      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a54:	4a94      	ldr	r2, [pc, #592]	; (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d869      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a5a:	4a94      	ldr	r2, [pc, #592]	; (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04c      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a60:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d863      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a66:	4a92      	ldr	r2, [pc, #584]	; (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d046      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a6c:	4a90      	ldr	r2, [pc, #576]	; (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d85d      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d82a      	bhi.n	8001acc <HAL_GPIO_Init+0xcc>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d859      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <HAL_GPIO_Init+0x80>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001ad5 	.word	0x08001ad5
 8001a88:	08001ae7 	.word	0x08001ae7
 8001a8c:	08001b29 	.word	0x08001b29
 8001a90:	08001b2f 	.word	0x08001b2f
 8001a94:	08001b2f 	.word	0x08001b2f
 8001a98:	08001b2f 	.word	0x08001b2f
 8001a9c:	08001b2f 	.word	0x08001b2f
 8001aa0:	08001b2f 	.word	0x08001b2f
 8001aa4:	08001b2f 	.word	0x08001b2f
 8001aa8:	08001b2f 	.word	0x08001b2f
 8001aac:	08001b2f 	.word	0x08001b2f
 8001ab0:	08001b2f 	.word	0x08001b2f
 8001ab4:	08001b2f 	.word	0x08001b2f
 8001ab8:	08001b2f 	.word	0x08001b2f
 8001abc:	08001b2f 	.word	0x08001b2f
 8001ac0:	08001b2f 	.word	0x08001b2f
 8001ac4:	08001add 	.word	0x08001add
 8001ac8:	08001af1 	.word	0x08001af1
 8001acc:	4a79      	ldr	r2, [pc, #484]	; (8001cb4 <HAL_GPIO_Init+0x2b4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad2:	e02c      	b.n	8001b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e029      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e024      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	3308      	adds	r3, #8
 8001aec:	623b      	str	r3, [r7, #32]
          break;
 8001aee:	e01f      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	330c      	adds	r3, #12
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e01a      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b02:	2304      	movs	r3, #4
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e013      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	611a      	str	r2, [r3, #16]
          break;
 8001b1a:	e009      	b.n	8001b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	615a      	str	r2, [r3, #20]
          break;
 8001b26:	e003      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          break;
 8001b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d801      	bhi.n	8001b3a <HAL_GPIO_Init+0x13a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_Init+0x13e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d802      	bhi.n	8001b4c <HAL_GPIO_Init+0x14c>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x152>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	3b08      	subs	r3, #8
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	210f      	movs	r1, #15
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	6a39      	ldr	r1, [r7, #32]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b80:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <HAL_GPIO_Init+0x2c0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_GPIO_Init+0x1ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3f      	ldr	r2, [pc, #252]	; (8001cc4 <HAL_GPIO_Init+0x2c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1e8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_GPIO_Init+0x2c8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1e4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x2cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1e0>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001bec:	2300      	movs	r3, #0
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bfe:	492f      	ldr	r1, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	492c      	ldr	r1, [pc, #176]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4928      	ldr	r1, [pc, #160]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4922      	ldr	r1, [pc, #136]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	491e      	ldr	r1, [pc, #120]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4918      	ldr	r1, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4914      	ldr	r1, [pc, #80]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
 8001c9c:	e021      	b.n	8001ce2 <HAL_GPIO_Init+0x2e2>
 8001c9e:	bf00      	nop
 8001ca0:	10320000 	.word	0x10320000
 8001ca4:	10310000 	.word	0x10310000
 8001ca8:	10220000 	.word	0x10220000
 8001cac:	10210000 	.word	0x10210000
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	10110000 	.word	0x10110000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4909      	ldr	r1, [pc, #36]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f ae8e 	bne.w	8001a14 <HAL_GPIO_Init+0x14>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	372c      	adds	r7, #44	; 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43d9      	mvns	r1, r3
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	400b      	ands	r3, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e26c      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8087 	beq.w	8001e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d8c:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d00c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d98:	4b8f      	ldr	r3, [pc, #572]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d112      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e>
 8001da4:	4b8c      	ldr	r3, [pc, #560]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d06c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x12c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d168      	bne.n	8001e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e246      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x76>
 8001dd4:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a7f      	ldr	r2, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e02e      	b.n	8001e40 <HAL_RCC_OscConfig+0xd4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x98>
 8001dea:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7a      	ldr	r2, [pc, #488]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xd4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0xbc>
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a71      	ldr	r2, [pc, #452]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xd4>
 8001e28:	4b6b      	ldr	r3, [pc, #428]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a67      	ldr	r2, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fab0 	bl	80013ac <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff faac 	bl	80013ac <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1fa      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xe4>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fa9c 	bl	80013ac <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff fa98 	bl	80013ac <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1e6      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x10c>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x18c>
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x176>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e1ba      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4939      	ldr	r1, [pc, #228]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	e03a      	b.n	8001f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x270>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa51 	bl	80013ac <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fa4d 	bl	80013ac <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e19b      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x270>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fa30 	bl	80013ac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff fa2c 	bl	80013ac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e17a      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d03a      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_RCC_OscConfig+0x274>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7ff fa10 	bl	80013ac <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff fa0c 	bl	80013ac <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e15a      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f000 faa6 	bl	8002500 <RCC_Delay>
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f9f6 	bl	80013ac <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f9f2 	bl	80013ac <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d908      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e140      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	42420000 	.word	0x42420000
 8001fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	4b9e      	ldr	r3, [pc, #632]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e9      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a6 	beq.w	800214a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4b97      	ldr	r3, [pc, #604]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b94      	ldr	r3, [pc, #592]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a93      	ldr	r2, [pc, #588]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b91      	ldr	r3, [pc, #580]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <HAL_RCC_OscConfig+0x4f8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x4f8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff f9b3 	bl	80013ac <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7ff f9af 	bl	80013ac <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b64      	cmp	r3, #100	; 0x64
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0fd      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b81      	ldr	r3, [pc, #516]	; (8002264 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x312>
 8002070:	4b7b      	ldr	r3, [pc, #492]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a7a      	ldr	r2, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	e02d      	b.n	80020da <HAL_RCC_OscConfig+0x36e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x334>
 8002086:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a75      	ldr	r2, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a72      	ldr	r2, [pc, #456]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	e01c      	b.n	80020da <HAL_RCC_OscConfig+0x36e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d10c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x356>
 80020a8:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a6c      	ldr	r2, [pc, #432]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e00b      	b.n	80020da <HAL_RCC_OscConfig+0x36e>
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a66      	ldr	r2, [pc, #408]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4b64      	ldr	r3, [pc, #400]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7ff f963 	bl	80013ac <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff f95f 	bl	80013ac <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0ab      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	4b57      	ldr	r3, [pc, #348]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ee      	beq.n	80020ea <HAL_RCC_OscConfig+0x37e>
 800210c:	e014      	b.n	8002138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7ff f94d 	bl	80013ac <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7ff f949 	bl	80013ac <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e095      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ee      	bne.n	8002116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b48      	ldr	r3, [pc, #288]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a47      	ldr	r2, [pc, #284]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8081 	beq.w	8002256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002154:	4b42      	ldr	r3, [pc, #264]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d061      	beq.n	8002224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d146      	bne.n	80021f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_RCC_OscConfig+0x4fc>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff f91d 	bl	80013ac <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff f919 	bl	80013ac <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e067      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d108      	bne.n	80021b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	492d      	ldr	r1, [pc, #180]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a19      	ldr	r1, [r3, #32]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	430b      	orrs	r3, r1
 80021c2:	4927      	ldr	r1, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x4fc>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff f8ed 	bl	80013ac <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff f8e9 	bl	80013ac <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e037      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46a>
 80021f4:	e02f      	b.n	8002256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_RCC_OscConfig+0x4fc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff f8d6 	bl	80013ac <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff f8d2 	bl	80013ac <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e020      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x498>
 8002222:	e018      	b.n	8002256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e013      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	429a      	cmp	r2, r3
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
 8002268:	42420060 	.word	0x42420060

0800226c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d0      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4965      	ldr	r1, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d040      	beq.n	800238c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d115      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e073      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4936      	ldr	r1, [pc, #216]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235c:	f7ff f826 	bl	80013ac <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7ff f822 	bl	80013ac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e053      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d210      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4922      	ldr	r1, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1cc>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ff84 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	0800fd28 	.word	0x0800fd28
 8002438:	20000014 	.word	0x20000014
 800243c:	20000018 	.word	0x20000018

08002440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b490      	push	{r4, r7}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002446:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002448:	1d3c      	adds	r4, r7, #4
 800244a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002450:	f240 2301 	movw	r3, #513	; 0x201
 8002454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x46>
 800247e:	e02d      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	e02d      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002492:	4413      	add	r3, r2
 8002494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0c5b      	lsrs	r3, r3, #17
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024b2:	4413      	add	r3, r2
 80024b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	fb02 f203 	mul.w	r2, r2, r3
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	e004      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	623b      	str	r3, [r7, #32]
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024de:	623b      	str	r3, [r7, #32]
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	6a3b      	ldr	r3, [r7, #32]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc90      	pop	{r4, r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	08003e1c 	.word	0x08003e1c
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	003d0900 	.word	0x003d0900

08002500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <RCC_Delay+0x34>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <RCC_Delay+0x38>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0a5b      	lsrs	r3, r3, #9
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800251c:	bf00      	nop
  }
  while (Delay --);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	60fa      	str	r2, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f9      	bne.n	800251c <RCC_Delay+0x1c>
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000014 	.word	0x20000014
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e076      	b.n	800263c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800255e:	d009      	beq.n	8002574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
 8002566:	e005      	b.n	8002574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fd7a 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	ea42 0103 	orr.w	r1, r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	0c1a      	lsrs	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f002 0204 	and.w	r2, r2, #4
 800261a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Transmit+0x22>
 8002662:	2302      	movs	r3, #2
 8002664:	e126      	b.n	80028b4 <HAL_SPI_Transmit+0x270>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266e:	f7fe fe9d 	bl	80013ac <HAL_GetTick>
 8002672:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002688:	e10b      	b.n	80028a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Transmit+0x52>
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800269a:	e102      	b.n	80028a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2203      	movs	r2, #3
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d10f      	bne.n	8002704 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d007      	beq.n	8002722 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272a:	d14b      	bne.n	80027c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_SPI_Transmit+0xf6>
 8002734:	8afb      	ldrh	r3, [r7, #22]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d13e      	bne.n	80027b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	1c9a      	adds	r2, r3, #2
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800275e:	e02b      	b.n	80027b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d112      	bne.n	8002794 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	86da      	strh	r2, [r3, #54]	; 0x36
 8002792:	e011      	b.n	80027b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002794:	f7fe fe0a 	bl	80013ac <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d803      	bhi.n	80027ac <HAL_SPI_Transmit+0x168>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d102      	bne.n	80027b2 <HAL_SPI_Transmit+0x16e>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027b6:	e074      	b.n	80028a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ce      	bne.n	8002760 <HAL_SPI_Transmit+0x11c>
 80027c2:	e04c      	b.n	800285e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_Transmit+0x18e>
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d140      	bne.n	8002854 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027f8:	e02c      	b.n	8002854 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d113      	bne.n	8002830 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	86da      	strh	r2, [r3, #54]	; 0x36
 800282e:	e011      	b.n	8002854 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002830:	f7fe fdbc 	bl	80013ac <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d803      	bhi.n	8002848 <HAL_SPI_Transmit+0x204>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002846:	d102      	bne.n	800284e <HAL_SPI_Transmit+0x20a>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002852:	e026      	b.n	80028a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1cd      	bne.n	80027fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa04 	bl	8002c70 <SPI_EndRxTxTransaction>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	77fb      	strb	r3, [r7, #31]
 800289e:	e000      	b.n	80028a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80028a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_SPI_Transmit_DMA+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e09b      	b.n	8002a14 <HAL_SPI_Transmit_DMA+0x158>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
 80028f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028f4:	e089      	b.n	8002a0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_Transmit_DMA+0x46>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002906:	e080      	b.n	8002a0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2203      	movs	r2, #3
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d10f      	bne.n	8002970 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800296e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_SPI_Transmit_DMA+0x160>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <HAL_SPI_Transmit_DMA+0x164>)
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <HAL_SPI_Transmit_DMA+0x168>)
 8002986:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2200      	movs	r2, #0
 800298e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4619      	mov	r1, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029a8:	f7fe fe96 	bl	80016d8 <HAL_DMA_Start_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029ca:	e01e      	b.n	8002a0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d007      	beq.n	80029ea <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0202 	orr.w	r2, r2, #2
 8002a08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	08002b05 	.word	0x08002b05
 8002a20:	08002a5f 	.word	0x08002a5f
 8002a24:	08002b21 	.word	0x08002b21

08002a28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6c:	f7fe fc9e 	bl	80013ac <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d03b      	beq.n	8002af8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0220 	bic.w	r2, r2, #32
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0202 	bic.w	r2, r2, #2
 8002a9e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	2164      	movs	r1, #100	; 0x64
 8002aa4:	6978      	ldr	r0, [r7, #20]
 8002aa6:	f000 f8e3 	bl	8002c70 <SPI_EndRxTxTransaction>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7ff ffab 	bl	8002a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002af6:	e002      	b.n	8002afe <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f7ff ff95 	bl	8002a28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff91 	bl	8002a3a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0203 	bic.w	r2, r2, #3
 8002b3c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff7a 	bl	8002a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b70:	f7fe fc1c 	bl	80013ac <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b80:	f7fe fc14 	bl	80013ac <HAL_GetTick>
 8002b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	0d1b      	lsrs	r3, r3, #20
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	fb02 f303 	mul.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b96:	e054      	b.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d050      	beq.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ba0:	f7fe fc04 	bl	80013ac <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d902      	bls.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d13d      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d111      	bne.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd8:	d004      	beq.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d107      	bne.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfc:	d10f      	bne.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e017      	b.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d19b      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000014 	.word	0x20000014

08002c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ff6a 	bl	8002b60 <SPI_WaitFlagStateUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e000      	b.n	8002ca4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e041      	b.n	8002d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe fa50 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 fa70 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e03a      	b.n	8002dda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_TIM_Base_Start_IT+0x98>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x58>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x58>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x58>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <HAL_TIM_Base_Start_IT+0xa0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800

08002df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0202 	mvn.w	r2, #2
 8002e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9b1 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9a4 	bl	8003188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f9b3 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0204 	mvn.w	r2, #4
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f987 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f97a 	bl	8003188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f989 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0208 	mvn.w	r2, #8
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f95d 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f950 	bl	8003188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f95f 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0210 	mvn.w	r2, #16
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f933 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f926 	bl	8003188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f935 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fb0a 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa77 	bl	800348e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8f9 	bl	80031be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0220 	mvn.w	r2, #32
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa42 	bl	800347c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x18>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b3      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x180>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd0>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x168>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	f000 8085 	beq.w	800316c <HAL_TIM_ConfigClockSource+0x16c>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x116>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xf6>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x136>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x156>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x156>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x156>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f000 f966 	bl	8003382 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04e      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f000 f94f 	bl	8003382 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03b      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 f8c6 	bl	8003294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	; 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f91d 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8003114:	e02b      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 f8e4 	bl	80032f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	; 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f90d 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8003134:	e01b      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 f8a6 	bl	8003294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f8fd 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8003154:	e00b      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 f8f4 	bl	800334e <TIM_ITRx_SetConfig>
        break;
 8003166:	e002      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800316c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a29      	ldr	r2, [pc, #164]	; (8003288 <TIM_Base_SetConfig+0xb8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_Base_SetConfig+0x30>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x30>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a26      	ldr	r2, [pc, #152]	; (800328c <TIM_Base_SetConfig+0xbc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x30>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a25      	ldr	r2, [pc, #148]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <TIM_Base_SetConfig+0xb8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <TIM_Base_SetConfig+0xbc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a07      	ldr	r2, [pc, #28]	; (8003288 <TIM_Base_SetConfig+0xb8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800

08003294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 030a 	bic.w	r3, r3, #10
 80032d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 0210 	bic.w	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800332c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	621a      	str	r2, [r3, #32]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	f043 0307 	orr.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e046      	b.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d009      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10c      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800

0800347c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <__errno>:
 80034a0:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <__errno+0x8>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000020 	.word	0x20000020

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2600      	movs	r6, #0
 80034b0:	4d0c      	ldr	r5, [pc, #48]	; (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	; (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a6      	cmp	r6, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	f000 fc5c 	bl	8003d78 <_init>
 80034c0:	2600      	movs	r6, #0
 80034c2:	4d0a      	ldr	r5, [pc, #40]	; (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <__libc_init_array+0x44>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a6      	cmp	r6, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d4:	4798      	blx	r3
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	f855 3b04 	ldr.w	r3, [r5], #4
 80034de:	4798      	blx	r3
 80034e0:	3601      	adds	r6, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	0800fd6c 	.word	0x0800fd6c
 80034e8:	0800fd6c 	.word	0x0800fd6c
 80034ec:	0800fd6c 	.word	0x0800fd6c
 80034f0:	0800fd70 	.word	0x0800fd70

080034f4 <memset>:
 80034f4:	4603      	mov	r3, r0
 80034f6:	4402      	add	r2, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d100      	bne.n	80034fe <memset+0xa>
 80034fc:	4770      	bx	lr
 80034fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003502:	e7f9      	b.n	80034f8 <memset+0x4>

08003504 <siprintf>:
 8003504:	b40e      	push	{r1, r2, r3}
 8003506:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800350a:	b500      	push	{lr}
 800350c:	b09c      	sub	sp, #112	; 0x70
 800350e:	ab1d      	add	r3, sp, #116	; 0x74
 8003510:	9002      	str	r0, [sp, #8]
 8003512:	9006      	str	r0, [sp, #24]
 8003514:	9107      	str	r1, [sp, #28]
 8003516:	9104      	str	r1, [sp, #16]
 8003518:	4808      	ldr	r0, [pc, #32]	; (800353c <siprintf+0x38>)
 800351a:	4909      	ldr	r1, [pc, #36]	; (8003540 <siprintf+0x3c>)
 800351c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003520:	9105      	str	r1, [sp, #20]
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	a902      	add	r1, sp, #8
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	f000 f868 	bl	80035fc <_svfiprintf_r>
 800352c:	2200      	movs	r2, #0
 800352e:	9b02      	ldr	r3, [sp, #8]
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	b01c      	add	sp, #112	; 0x70
 8003534:	f85d eb04 	ldr.w	lr, [sp], #4
 8003538:	b003      	add	sp, #12
 800353a:	4770      	bx	lr
 800353c:	20000020 	.word	0x20000020
 8003540:	ffff0208 	.word	0xffff0208

08003544 <__ssputs_r>:
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	688e      	ldr	r6, [r1, #8]
 800354a:	4682      	mov	sl, r0
 800354c:	429e      	cmp	r6, r3
 800354e:	460c      	mov	r4, r1
 8003550:	4690      	mov	r8, r2
 8003552:	461f      	mov	r7, r3
 8003554:	d838      	bhi.n	80035c8 <__ssputs_r+0x84>
 8003556:	898a      	ldrh	r2, [r1, #12]
 8003558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800355c:	d032      	beq.n	80035c4 <__ssputs_r+0x80>
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	6909      	ldr	r1, [r1, #16]
 8003562:	3301      	adds	r3, #1
 8003564:	eba5 0901 	sub.w	r9, r5, r1
 8003568:	6965      	ldr	r5, [r4, #20]
 800356a:	444b      	add	r3, r9
 800356c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003574:	106d      	asrs	r5, r5, #1
 8003576:	429d      	cmp	r5, r3
 8003578:	bf38      	it	cc
 800357a:	461d      	movcc	r5, r3
 800357c:	0553      	lsls	r3, r2, #21
 800357e:	d531      	bpl.n	80035e4 <__ssputs_r+0xa0>
 8003580:	4629      	mov	r1, r5
 8003582:	f000 fb53 	bl	8003c2c <_malloc_r>
 8003586:	4606      	mov	r6, r0
 8003588:	b950      	cbnz	r0, 80035a0 <__ssputs_r+0x5c>
 800358a:	230c      	movs	r3, #12
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f8ca 3000 	str.w	r3, [sl]
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	464a      	mov	r2, r9
 80035a2:	6921      	ldr	r1, [r4, #16]
 80035a4:	f000 face 	bl	8003b44 <memcpy>
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	6126      	str	r6, [r4, #16]
 80035b6:	444e      	add	r6, r9
 80035b8:	6026      	str	r6, [r4, #0]
 80035ba:	463e      	mov	r6, r7
 80035bc:	6165      	str	r5, [r4, #20]
 80035be:	eba5 0509 	sub.w	r5, r5, r9
 80035c2:	60a5      	str	r5, [r4, #8]
 80035c4:	42be      	cmp	r6, r7
 80035c6:	d900      	bls.n	80035ca <__ssputs_r+0x86>
 80035c8:	463e      	mov	r6, r7
 80035ca:	4632      	mov	r2, r6
 80035cc:	4641      	mov	r1, r8
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	f000 fac6 	bl	8003b60 <memmove>
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	1b9b      	subs	r3, r3, r6
 80035da:	4432      	add	r2, r6
 80035dc:	2000      	movs	r0, #0
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	e7db      	b.n	800359c <__ssputs_r+0x58>
 80035e4:	462a      	mov	r2, r5
 80035e6:	f000 fb7b 	bl	8003ce0 <_realloc_r>
 80035ea:	4606      	mov	r6, r0
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1e1      	bne.n	80035b4 <__ssputs_r+0x70>
 80035f0:	4650      	mov	r0, sl
 80035f2:	6921      	ldr	r1, [r4, #16]
 80035f4:	f000 face 	bl	8003b94 <_free_r>
 80035f8:	e7c7      	b.n	800358a <__ssputs_r+0x46>
	...

080035fc <_svfiprintf_r>:
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003600:	4698      	mov	r8, r3
 8003602:	898b      	ldrh	r3, [r1, #12]
 8003604:	4607      	mov	r7, r0
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	460d      	mov	r5, r1
 800360a:	4614      	mov	r4, r2
 800360c:	b09d      	sub	sp, #116	; 0x74
 800360e:	d50e      	bpl.n	800362e <_svfiprintf_r+0x32>
 8003610:	690b      	ldr	r3, [r1, #16]
 8003612:	b963      	cbnz	r3, 800362e <_svfiprintf_r+0x32>
 8003614:	2140      	movs	r1, #64	; 0x40
 8003616:	f000 fb09 	bl	8003c2c <_malloc_r>
 800361a:	6028      	str	r0, [r5, #0]
 800361c:	6128      	str	r0, [r5, #16]
 800361e:	b920      	cbnz	r0, 800362a <_svfiprintf_r+0x2e>
 8003620:	230c      	movs	r3, #12
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	e0d1      	b.n	80037ce <_svfiprintf_r+0x1d2>
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	616b      	str	r3, [r5, #20]
 800362e:	2300      	movs	r3, #0
 8003630:	9309      	str	r3, [sp, #36]	; 0x24
 8003632:	2320      	movs	r3, #32
 8003634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003638:	2330      	movs	r3, #48	; 0x30
 800363a:	f04f 0901 	mov.w	r9, #1
 800363e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003642:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037e8 <_svfiprintf_r+0x1ec>
 8003646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800364a:	4623      	mov	r3, r4
 800364c:	469a      	mov	sl, r3
 800364e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003652:	b10a      	cbz	r2, 8003658 <_svfiprintf_r+0x5c>
 8003654:	2a25      	cmp	r2, #37	; 0x25
 8003656:	d1f9      	bne.n	800364c <_svfiprintf_r+0x50>
 8003658:	ebba 0b04 	subs.w	fp, sl, r4
 800365c:	d00b      	beq.n	8003676 <_svfiprintf_r+0x7a>
 800365e:	465b      	mov	r3, fp
 8003660:	4622      	mov	r2, r4
 8003662:	4629      	mov	r1, r5
 8003664:	4638      	mov	r0, r7
 8003666:	f7ff ff6d 	bl	8003544 <__ssputs_r>
 800366a:	3001      	adds	r0, #1
 800366c:	f000 80aa 	beq.w	80037c4 <_svfiprintf_r+0x1c8>
 8003670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003672:	445a      	add	r2, fp
 8003674:	9209      	str	r2, [sp, #36]	; 0x24
 8003676:	f89a 3000 	ldrb.w	r3, [sl]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a2 	beq.w	80037c4 <_svfiprintf_r+0x1c8>
 8003680:	2300      	movs	r3, #0
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800368a:	f10a 0a01 	add.w	sl, sl, #1
 800368e:	9304      	str	r3, [sp, #16]
 8003690:	9307      	str	r3, [sp, #28]
 8003692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003696:	931a      	str	r3, [sp, #104]	; 0x68
 8003698:	4654      	mov	r4, sl
 800369a:	2205      	movs	r2, #5
 800369c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a0:	4851      	ldr	r0, [pc, #324]	; (80037e8 <_svfiprintf_r+0x1ec>)
 80036a2:	f000 fa41 	bl	8003b28 <memchr>
 80036a6:	9a04      	ldr	r2, [sp, #16]
 80036a8:	b9d8      	cbnz	r0, 80036e2 <_svfiprintf_r+0xe6>
 80036aa:	06d0      	lsls	r0, r2, #27
 80036ac:	bf44      	itt	mi
 80036ae:	2320      	movmi	r3, #32
 80036b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036b4:	0711      	lsls	r1, r2, #28
 80036b6:	bf44      	itt	mi
 80036b8:	232b      	movmi	r3, #43	; 0x2b
 80036ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036be:	f89a 3000 	ldrb.w	r3, [sl]
 80036c2:	2b2a      	cmp	r3, #42	; 0x2a
 80036c4:	d015      	beq.n	80036f2 <_svfiprintf_r+0xf6>
 80036c6:	4654      	mov	r4, sl
 80036c8:	2000      	movs	r0, #0
 80036ca:	f04f 0c0a 	mov.w	ip, #10
 80036ce:	9a07      	ldr	r2, [sp, #28]
 80036d0:	4621      	mov	r1, r4
 80036d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036d6:	3b30      	subs	r3, #48	; 0x30
 80036d8:	2b09      	cmp	r3, #9
 80036da:	d94e      	bls.n	800377a <_svfiprintf_r+0x17e>
 80036dc:	b1b0      	cbz	r0, 800370c <_svfiprintf_r+0x110>
 80036de:	9207      	str	r2, [sp, #28]
 80036e0:	e014      	b.n	800370c <_svfiprintf_r+0x110>
 80036e2:	eba0 0308 	sub.w	r3, r0, r8
 80036e6:	fa09 f303 	lsl.w	r3, r9, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	46a2      	mov	sl, r4
 80036ee:	9304      	str	r3, [sp, #16]
 80036f0:	e7d2      	b.n	8003698 <_svfiprintf_r+0x9c>
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	1d19      	adds	r1, r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	9103      	str	r1, [sp, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfbb      	ittet	lt
 80036fe:	425b      	neglt	r3, r3
 8003700:	f042 0202 	orrlt.w	r2, r2, #2
 8003704:	9307      	strge	r3, [sp, #28]
 8003706:	9307      	strlt	r3, [sp, #28]
 8003708:	bfb8      	it	lt
 800370a:	9204      	strlt	r2, [sp, #16]
 800370c:	7823      	ldrb	r3, [r4, #0]
 800370e:	2b2e      	cmp	r3, #46	; 0x2e
 8003710:	d10c      	bne.n	800372c <_svfiprintf_r+0x130>
 8003712:	7863      	ldrb	r3, [r4, #1]
 8003714:	2b2a      	cmp	r3, #42	; 0x2a
 8003716:	d135      	bne.n	8003784 <_svfiprintf_r+0x188>
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	3402      	adds	r4, #2
 800371c:	1d1a      	adds	r2, r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	9203      	str	r2, [sp, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	bfb8      	it	lt
 8003726:	f04f 33ff 	movlt.w	r3, #4294967295
 800372a:	9305      	str	r3, [sp, #20]
 800372c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037f8 <_svfiprintf_r+0x1fc>
 8003730:	2203      	movs	r2, #3
 8003732:	4650      	mov	r0, sl
 8003734:	7821      	ldrb	r1, [r4, #0]
 8003736:	f000 f9f7 	bl	8003b28 <memchr>
 800373a:	b140      	cbz	r0, 800374e <_svfiprintf_r+0x152>
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	eba0 000a 	sub.w	r0, r0, sl
 8003742:	fa03 f000 	lsl.w	r0, r3, r0
 8003746:	9b04      	ldr	r3, [sp, #16]
 8003748:	3401      	adds	r4, #1
 800374a:	4303      	orrs	r3, r0
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003752:	2206      	movs	r2, #6
 8003754:	4825      	ldr	r0, [pc, #148]	; (80037ec <_svfiprintf_r+0x1f0>)
 8003756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800375a:	f000 f9e5 	bl	8003b28 <memchr>
 800375e:	2800      	cmp	r0, #0
 8003760:	d038      	beq.n	80037d4 <_svfiprintf_r+0x1d8>
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <_svfiprintf_r+0x1f4>)
 8003764:	bb1b      	cbnz	r3, 80037ae <_svfiprintf_r+0x1b2>
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	3307      	adds	r3, #7
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	3308      	adds	r3, #8
 8003770:	9303      	str	r3, [sp, #12]
 8003772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003774:	4433      	add	r3, r6
 8003776:	9309      	str	r3, [sp, #36]	; 0x24
 8003778:	e767      	b.n	800364a <_svfiprintf_r+0x4e>
 800377a:	460c      	mov	r4, r1
 800377c:	2001      	movs	r0, #1
 800377e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003782:	e7a5      	b.n	80036d0 <_svfiprintf_r+0xd4>
 8003784:	2300      	movs	r3, #0
 8003786:	f04f 0c0a 	mov.w	ip, #10
 800378a:	4619      	mov	r1, r3
 800378c:	3401      	adds	r4, #1
 800378e:	9305      	str	r3, [sp, #20]
 8003790:	4620      	mov	r0, r4
 8003792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003796:	3a30      	subs	r2, #48	; 0x30
 8003798:	2a09      	cmp	r2, #9
 800379a:	d903      	bls.n	80037a4 <_svfiprintf_r+0x1a8>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0c5      	beq.n	800372c <_svfiprintf_r+0x130>
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	e7c3      	b.n	800372c <_svfiprintf_r+0x130>
 80037a4:	4604      	mov	r4, r0
 80037a6:	2301      	movs	r3, #1
 80037a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80037ac:	e7f0      	b.n	8003790 <_svfiprintf_r+0x194>
 80037ae:	ab03      	add	r3, sp, #12
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	462a      	mov	r2, r5
 80037b4:	4638      	mov	r0, r7
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <_svfiprintf_r+0x1f8>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	f3af 8000 	nop.w
 80037be:	1c42      	adds	r2, r0, #1
 80037c0:	4606      	mov	r6, r0
 80037c2:	d1d6      	bne.n	8003772 <_svfiprintf_r+0x176>
 80037c4:	89ab      	ldrh	r3, [r5, #12]
 80037c6:	065b      	lsls	r3, r3, #25
 80037c8:	f53f af2c 	bmi.w	8003624 <_svfiprintf_r+0x28>
 80037cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ce:	b01d      	add	sp, #116	; 0x74
 80037d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d4:	ab03      	add	r3, sp, #12
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	462a      	mov	r2, r5
 80037da:	4638      	mov	r0, r7
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <_svfiprintf_r+0x1f8>)
 80037de:	a904      	add	r1, sp, #16
 80037e0:	f000 f87c 	bl	80038dc <_printf_i>
 80037e4:	e7eb      	b.n	80037be <_svfiprintf_r+0x1c2>
 80037e6:	bf00      	nop
 80037e8:	0800fd38 	.word	0x0800fd38
 80037ec:	0800fd42 	.word	0x0800fd42
 80037f0:	00000000 	.word	0x00000000
 80037f4:	08003545 	.word	0x08003545
 80037f8:	0800fd3e 	.word	0x0800fd3e

080037fc <_printf_common>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	4616      	mov	r6, r2
 8003802:	4699      	mov	r9, r3
 8003804:	688a      	ldr	r2, [r1, #8]
 8003806:	690b      	ldr	r3, [r1, #16]
 8003808:	4607      	mov	r7, r0
 800380a:	4293      	cmp	r3, r2
 800380c:	bfb8      	it	lt
 800380e:	4613      	movlt	r3, r2
 8003810:	6033      	str	r3, [r6, #0]
 8003812:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003816:	460c      	mov	r4, r1
 8003818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800381c:	b10a      	cbz	r2, 8003822 <_printf_common+0x26>
 800381e:	3301      	adds	r3, #1
 8003820:	6033      	str	r3, [r6, #0]
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	0699      	lsls	r1, r3, #26
 8003826:	bf42      	ittt	mi
 8003828:	6833      	ldrmi	r3, [r6, #0]
 800382a:	3302      	addmi	r3, #2
 800382c:	6033      	strmi	r3, [r6, #0]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	f015 0506 	ands.w	r5, r5, #6
 8003834:	d106      	bne.n	8003844 <_printf_common+0x48>
 8003836:	f104 0a19 	add.w	sl, r4, #25
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	6832      	ldr	r2, [r6, #0]
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	42ab      	cmp	r3, r5
 8003842:	dc28      	bgt.n	8003896 <_printf_common+0x9a>
 8003844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003848:	1e13      	subs	r3, r2, #0
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	bf18      	it	ne
 800384e:	2301      	movne	r3, #1
 8003850:	0692      	lsls	r2, r2, #26
 8003852:	d42d      	bmi.n	80038b0 <_printf_common+0xb4>
 8003854:	4649      	mov	r1, r9
 8003856:	4638      	mov	r0, r7
 8003858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800385c:	47c0      	blx	r8
 800385e:	3001      	adds	r0, #1
 8003860:	d020      	beq.n	80038a4 <_printf_common+0xa8>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	68e5      	ldr	r5, [r4, #12]
 8003866:	f003 0306 	and.w	r3, r3, #6
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf18      	it	ne
 800386e:	2500      	movne	r5, #0
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	f04f 0600 	mov.w	r6, #0
 8003876:	68a3      	ldr	r3, [r4, #8]
 8003878:	bf08      	it	eq
 800387a:	1aad      	subeq	r5, r5, r2
 800387c:	6922      	ldr	r2, [r4, #16]
 800387e:	bf08      	it	eq
 8003880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003884:	4293      	cmp	r3, r2
 8003886:	bfc4      	itt	gt
 8003888:	1a9b      	subgt	r3, r3, r2
 800388a:	18ed      	addgt	r5, r5, r3
 800388c:	341a      	adds	r4, #26
 800388e:	42b5      	cmp	r5, r6
 8003890:	d11a      	bne.n	80038c8 <_printf_common+0xcc>
 8003892:	2000      	movs	r0, #0
 8003894:	e008      	b.n	80038a8 <_printf_common+0xac>
 8003896:	2301      	movs	r3, #1
 8003898:	4652      	mov	r2, sl
 800389a:	4649      	mov	r1, r9
 800389c:	4638      	mov	r0, r7
 800389e:	47c0      	blx	r8
 80038a0:	3001      	adds	r0, #1
 80038a2:	d103      	bne.n	80038ac <_printf_common+0xb0>
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	3501      	adds	r5, #1
 80038ae:	e7c4      	b.n	800383a <_printf_common+0x3e>
 80038b0:	2030      	movs	r0, #48	; 0x30
 80038b2:	18e1      	adds	r1, r4, r3
 80038b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038be:	4422      	add	r2, r4
 80038c0:	3302      	adds	r3, #2
 80038c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038c6:	e7c5      	b.n	8003854 <_printf_common+0x58>
 80038c8:	2301      	movs	r3, #1
 80038ca:	4622      	mov	r2, r4
 80038cc:	4649      	mov	r1, r9
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c0      	blx	r8
 80038d2:	3001      	adds	r0, #1
 80038d4:	d0e6      	beq.n	80038a4 <_printf_common+0xa8>
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7d9      	b.n	800388e <_printf_common+0x92>
	...

080038dc <_printf_i>:
 80038dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	460c      	mov	r4, r1
 80038e2:	7e27      	ldrb	r7, [r4, #24]
 80038e4:	4691      	mov	r9, r2
 80038e6:	2f78      	cmp	r7, #120	; 0x78
 80038e8:	4680      	mov	r8, r0
 80038ea:	469a      	mov	sl, r3
 80038ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f2:	d807      	bhi.n	8003904 <_printf_i+0x28>
 80038f4:	2f62      	cmp	r7, #98	; 0x62
 80038f6:	d80a      	bhi.n	800390e <_printf_i+0x32>
 80038f8:	2f00      	cmp	r7, #0
 80038fa:	f000 80d9 	beq.w	8003ab0 <_printf_i+0x1d4>
 80038fe:	2f58      	cmp	r7, #88	; 0x58
 8003900:	f000 80a4 	beq.w	8003a4c <_printf_i+0x170>
 8003904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800390c:	e03a      	b.n	8003984 <_printf_i+0xa8>
 800390e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003912:	2b15      	cmp	r3, #21
 8003914:	d8f6      	bhi.n	8003904 <_printf_i+0x28>
 8003916:	a001      	add	r0, pc, #4	; (adr r0, 800391c <_printf_i+0x40>)
 8003918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800391c:	08003975 	.word	0x08003975
 8003920:	08003989 	.word	0x08003989
 8003924:	08003905 	.word	0x08003905
 8003928:	08003905 	.word	0x08003905
 800392c:	08003905 	.word	0x08003905
 8003930:	08003905 	.word	0x08003905
 8003934:	08003989 	.word	0x08003989
 8003938:	08003905 	.word	0x08003905
 800393c:	08003905 	.word	0x08003905
 8003940:	08003905 	.word	0x08003905
 8003944:	08003905 	.word	0x08003905
 8003948:	08003a97 	.word	0x08003a97
 800394c:	080039b9 	.word	0x080039b9
 8003950:	08003a79 	.word	0x08003a79
 8003954:	08003905 	.word	0x08003905
 8003958:	08003905 	.word	0x08003905
 800395c:	08003ab9 	.word	0x08003ab9
 8003960:	08003905 	.word	0x08003905
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003905 	.word	0x08003905
 800396c:	08003905 	.word	0x08003905
 8003970:	08003a81 	.word	0x08003a81
 8003974:	680b      	ldr	r3, [r1, #0]
 8003976:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	600a      	str	r2, [r1, #0]
 8003980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003984:	2301      	movs	r3, #1
 8003986:	e0a4      	b.n	8003ad2 <_printf_i+0x1f6>
 8003988:	6825      	ldr	r5, [r4, #0]
 800398a:	6808      	ldr	r0, [r1, #0]
 800398c:	062e      	lsls	r6, r5, #24
 800398e:	f100 0304 	add.w	r3, r0, #4
 8003992:	d50a      	bpl.n	80039aa <_printf_i+0xce>
 8003994:	6805      	ldr	r5, [r0, #0]
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	2d00      	cmp	r5, #0
 800399a:	da03      	bge.n	80039a4 <_printf_i+0xc8>
 800399c:	232d      	movs	r3, #45	; 0x2d
 800399e:	426d      	negs	r5, r5
 80039a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a4:	230a      	movs	r3, #10
 80039a6:	485e      	ldr	r0, [pc, #376]	; (8003b20 <_printf_i+0x244>)
 80039a8:	e019      	b.n	80039de <_printf_i+0x102>
 80039aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039ae:	6805      	ldr	r5, [r0, #0]
 80039b0:	600b      	str	r3, [r1, #0]
 80039b2:	bf18      	it	ne
 80039b4:	b22d      	sxthne	r5, r5
 80039b6:	e7ef      	b.n	8003998 <_printf_i+0xbc>
 80039b8:	680b      	ldr	r3, [r1, #0]
 80039ba:	6825      	ldr	r5, [r4, #0]
 80039bc:	1d18      	adds	r0, r3, #4
 80039be:	6008      	str	r0, [r1, #0]
 80039c0:	0628      	lsls	r0, r5, #24
 80039c2:	d501      	bpl.n	80039c8 <_printf_i+0xec>
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	e002      	b.n	80039ce <_printf_i+0xf2>
 80039c8:	0669      	lsls	r1, r5, #25
 80039ca:	d5fb      	bpl.n	80039c4 <_printf_i+0xe8>
 80039cc:	881d      	ldrh	r5, [r3, #0]
 80039ce:	2f6f      	cmp	r7, #111	; 0x6f
 80039d0:	bf0c      	ite	eq
 80039d2:	2308      	moveq	r3, #8
 80039d4:	230a      	movne	r3, #10
 80039d6:	4852      	ldr	r0, [pc, #328]	; (8003b20 <_printf_i+0x244>)
 80039d8:	2100      	movs	r1, #0
 80039da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039de:	6866      	ldr	r6, [r4, #4]
 80039e0:	2e00      	cmp	r6, #0
 80039e2:	bfa8      	it	ge
 80039e4:	6821      	ldrge	r1, [r4, #0]
 80039e6:	60a6      	str	r6, [r4, #8]
 80039e8:	bfa4      	itt	ge
 80039ea:	f021 0104 	bicge.w	r1, r1, #4
 80039ee:	6021      	strge	r1, [r4, #0]
 80039f0:	b90d      	cbnz	r5, 80039f6 <_printf_i+0x11a>
 80039f2:	2e00      	cmp	r6, #0
 80039f4:	d04d      	beq.n	8003a92 <_printf_i+0x1b6>
 80039f6:	4616      	mov	r6, r2
 80039f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80039fc:	fb03 5711 	mls	r7, r3, r1, r5
 8003a00:	5dc7      	ldrb	r7, [r0, r7]
 8003a02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a06:	462f      	mov	r7, r5
 8003a08:	42bb      	cmp	r3, r7
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	d9f4      	bls.n	80039f8 <_printf_i+0x11c>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d10b      	bne.n	8003a2a <_printf_i+0x14e>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	07df      	lsls	r7, r3, #31
 8003a16:	d508      	bpl.n	8003a2a <_printf_i+0x14e>
 8003a18:	6923      	ldr	r3, [r4, #16]
 8003a1a:	6861      	ldr	r1, [r4, #4]
 8003a1c:	4299      	cmp	r1, r3
 8003a1e:	bfde      	ittt	le
 8003a20:	2330      	movle	r3, #48	; 0x30
 8003a22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a2a:	1b92      	subs	r2, r2, r6
 8003a2c:	6122      	str	r2, [r4, #16]
 8003a2e:	464b      	mov	r3, r9
 8003a30:	4621      	mov	r1, r4
 8003a32:	4640      	mov	r0, r8
 8003a34:	f8cd a000 	str.w	sl, [sp]
 8003a38:	aa03      	add	r2, sp, #12
 8003a3a:	f7ff fedf 	bl	80037fc <_printf_common>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d14c      	bne.n	8003adc <_printf_i+0x200>
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	b004      	add	sp, #16
 8003a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4c:	4834      	ldr	r0, [pc, #208]	; (8003b20 <_printf_i+0x244>)
 8003a4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a52:	680e      	ldr	r6, [r1, #0]
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a5a:	061f      	lsls	r7, r3, #24
 8003a5c:	600e      	str	r6, [r1, #0]
 8003a5e:	d514      	bpl.n	8003a8a <_printf_i+0x1ae>
 8003a60:	07d9      	lsls	r1, r3, #31
 8003a62:	bf44      	itt	mi
 8003a64:	f043 0320 	orrmi.w	r3, r3, #32
 8003a68:	6023      	strmi	r3, [r4, #0]
 8003a6a:	b91d      	cbnz	r5, 8003a74 <_printf_i+0x198>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f023 0320 	bic.w	r3, r3, #32
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	2310      	movs	r3, #16
 8003a76:	e7af      	b.n	80039d8 <_printf_i+0xfc>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	2378      	movs	r3, #120	; 0x78
 8003a82:	4828      	ldr	r0, [pc, #160]	; (8003b24 <_printf_i+0x248>)
 8003a84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a88:	e7e3      	b.n	8003a52 <_printf_i+0x176>
 8003a8a:	065e      	lsls	r6, r3, #25
 8003a8c:	bf48      	it	mi
 8003a8e:	b2ad      	uxthmi	r5, r5
 8003a90:	e7e6      	b.n	8003a60 <_printf_i+0x184>
 8003a92:	4616      	mov	r6, r2
 8003a94:	e7bb      	b.n	8003a0e <_printf_i+0x132>
 8003a96:	680b      	ldr	r3, [r1, #0]
 8003a98:	6826      	ldr	r6, [r4, #0]
 8003a9a:	1d1d      	adds	r5, r3, #4
 8003a9c:	6960      	ldr	r0, [r4, #20]
 8003a9e:	600d      	str	r5, [r1, #0]
 8003aa0:	0635      	lsls	r5, r6, #24
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	d501      	bpl.n	8003aaa <_printf_i+0x1ce>
 8003aa6:	6018      	str	r0, [r3, #0]
 8003aa8:	e002      	b.n	8003ab0 <_printf_i+0x1d4>
 8003aaa:	0671      	lsls	r1, r6, #25
 8003aac:	d5fb      	bpl.n	8003aa6 <_printf_i+0x1ca>
 8003aae:	8018      	strh	r0, [r3, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4616      	mov	r6, r2
 8003ab4:	6123      	str	r3, [r4, #16]
 8003ab6:	e7ba      	b.n	8003a2e <_printf_i+0x152>
 8003ab8:	680b      	ldr	r3, [r1, #0]
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	600a      	str	r2, [r1, #0]
 8003abe:	681e      	ldr	r6, [r3, #0]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	6862      	ldr	r2, [r4, #4]
 8003ac6:	f000 f82f 	bl	8003b28 <memchr>
 8003aca:	b108      	cbz	r0, 8003ad0 <_printf_i+0x1f4>
 8003acc:	1b80      	subs	r0, r0, r6
 8003ace:	6060      	str	r0, [r4, #4]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	6123      	str	r3, [r4, #16]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ada:	e7a8      	b.n	8003a2e <_printf_i+0x152>
 8003adc:	4632      	mov	r2, r6
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	47d0      	blx	sl
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d0ab      	beq.n	8003a42 <_printf_i+0x166>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	079b      	lsls	r3, r3, #30
 8003aee:	d413      	bmi.n	8003b18 <_printf_i+0x23c>
 8003af0:	68e0      	ldr	r0, [r4, #12]
 8003af2:	9b03      	ldr	r3, [sp, #12]
 8003af4:	4298      	cmp	r0, r3
 8003af6:	bfb8      	it	lt
 8003af8:	4618      	movlt	r0, r3
 8003afa:	e7a4      	b.n	8003a46 <_printf_i+0x16a>
 8003afc:	2301      	movs	r3, #1
 8003afe:	4632      	mov	r2, r6
 8003b00:	4649      	mov	r1, r9
 8003b02:	4640      	mov	r0, r8
 8003b04:	47d0      	blx	sl
 8003b06:	3001      	adds	r0, #1
 8003b08:	d09b      	beq.n	8003a42 <_printf_i+0x166>
 8003b0a:	3501      	adds	r5, #1
 8003b0c:	68e3      	ldr	r3, [r4, #12]
 8003b0e:	9903      	ldr	r1, [sp, #12]
 8003b10:	1a5b      	subs	r3, r3, r1
 8003b12:	42ab      	cmp	r3, r5
 8003b14:	dcf2      	bgt.n	8003afc <_printf_i+0x220>
 8003b16:	e7eb      	b.n	8003af0 <_printf_i+0x214>
 8003b18:	2500      	movs	r5, #0
 8003b1a:	f104 0619 	add.w	r6, r4, #25
 8003b1e:	e7f5      	b.n	8003b0c <_printf_i+0x230>
 8003b20:	0800fd49 	.word	0x0800fd49
 8003b24:	0800fd5a 	.word	0x0800fd5a

08003b28 <memchr>:
 8003b28:	4603      	mov	r3, r0
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	b2c9      	uxtb	r1, r1
 8003b2e:	4402      	add	r2, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	d101      	bne.n	8003b3a <memchr+0x12>
 8003b36:	2000      	movs	r0, #0
 8003b38:	e003      	b.n	8003b42 <memchr+0x1a>
 8003b3a:	7804      	ldrb	r4, [r0, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	428c      	cmp	r4, r1
 8003b40:	d1f6      	bne.n	8003b30 <memchr+0x8>
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <memcpy>:
 8003b44:	440a      	add	r2, r1
 8003b46:	4291      	cmp	r1, r2
 8003b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b4c:	d100      	bne.n	8003b50 <memcpy+0xc>
 8003b4e:	4770      	bx	lr
 8003b50:	b510      	push	{r4, lr}
 8003b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b56:	4291      	cmp	r1, r2
 8003b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b5c:	d1f9      	bne.n	8003b52 <memcpy+0xe>
 8003b5e:	bd10      	pop	{r4, pc}

08003b60 <memmove>:
 8003b60:	4288      	cmp	r0, r1
 8003b62:	b510      	push	{r4, lr}
 8003b64:	eb01 0402 	add.w	r4, r1, r2
 8003b68:	d902      	bls.n	8003b70 <memmove+0x10>
 8003b6a:	4284      	cmp	r4, r0
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	d807      	bhi.n	8003b80 <memmove+0x20>
 8003b70:	1e43      	subs	r3, r0, #1
 8003b72:	42a1      	cmp	r1, r4
 8003b74:	d008      	beq.n	8003b88 <memmove+0x28>
 8003b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b7e:	e7f8      	b.n	8003b72 <memmove+0x12>
 8003b80:	4601      	mov	r1, r0
 8003b82:	4402      	add	r2, r0
 8003b84:	428a      	cmp	r2, r1
 8003b86:	d100      	bne.n	8003b8a <memmove+0x2a>
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b92:	e7f7      	b.n	8003b84 <memmove+0x24>

08003b94 <_free_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4605      	mov	r5, r0
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	d043      	beq.n	8003c24 <_free_r+0x90>
 8003b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba0:	1f0c      	subs	r4, r1, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfb8      	it	lt
 8003ba6:	18e4      	addlt	r4, r4, r3
 8003ba8:	f000 f8d0 	bl	8003d4c <__malloc_lock>
 8003bac:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <_free_r+0x94>)
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	b933      	cbnz	r3, 8003bc2 <_free_r+0x2e>
 8003bb4:	6063      	str	r3, [r4, #4]
 8003bb6:	6014      	str	r4, [r2, #0]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bbe:	f000 b8cb 	b.w	8003d58 <__malloc_unlock>
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	d90a      	bls.n	8003bdc <_free_r+0x48>
 8003bc6:	6821      	ldr	r1, [r4, #0]
 8003bc8:	1862      	adds	r2, r4, r1
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	bf01      	itttt	eq
 8003bce:	681a      	ldreq	r2, [r3, #0]
 8003bd0:	685b      	ldreq	r3, [r3, #4]
 8003bd2:	1852      	addeq	r2, r2, r1
 8003bd4:	6022      	streq	r2, [r4, #0]
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6004      	str	r4, [r0, #0]
 8003bda:	e7ed      	b.n	8003bb8 <_free_r+0x24>
 8003bdc:	461a      	mov	r2, r3
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	b10b      	cbz	r3, 8003be6 <_free_r+0x52>
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	d9fa      	bls.n	8003bdc <_free_r+0x48>
 8003be6:	6811      	ldr	r1, [r2, #0]
 8003be8:	1850      	adds	r0, r2, r1
 8003bea:	42a0      	cmp	r0, r4
 8003bec:	d10b      	bne.n	8003c06 <_free_r+0x72>
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	4401      	add	r1, r0
 8003bf2:	1850      	adds	r0, r2, r1
 8003bf4:	4283      	cmp	r3, r0
 8003bf6:	6011      	str	r1, [r2, #0]
 8003bf8:	d1de      	bne.n	8003bb8 <_free_r+0x24>
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4401      	add	r1, r0
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	6053      	str	r3, [r2, #4]
 8003c04:	e7d8      	b.n	8003bb8 <_free_r+0x24>
 8003c06:	d902      	bls.n	8003c0e <_free_r+0x7a>
 8003c08:	230c      	movs	r3, #12
 8003c0a:	602b      	str	r3, [r5, #0]
 8003c0c:	e7d4      	b.n	8003bb8 <_free_r+0x24>
 8003c0e:	6820      	ldr	r0, [r4, #0]
 8003c10:	1821      	adds	r1, r4, r0
 8003c12:	428b      	cmp	r3, r1
 8003c14:	bf01      	itttt	eq
 8003c16:	6819      	ldreq	r1, [r3, #0]
 8003c18:	685b      	ldreq	r3, [r3, #4]
 8003c1a:	1809      	addeq	r1, r1, r0
 8003c1c:	6021      	streq	r1, [r4, #0]
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6054      	str	r4, [r2, #4]
 8003c22:	e7c9      	b.n	8003bb8 <_free_r+0x24>
 8003c24:	bd38      	pop	{r3, r4, r5, pc}
 8003c26:	bf00      	nop
 8003c28:	200000dc 	.word	0x200000dc

08003c2c <_malloc_r>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	1ccd      	adds	r5, r1, #3
 8003c30:	f025 0503 	bic.w	r5, r5, #3
 8003c34:	3508      	adds	r5, #8
 8003c36:	2d0c      	cmp	r5, #12
 8003c38:	bf38      	it	cc
 8003c3a:	250c      	movcc	r5, #12
 8003c3c:	2d00      	cmp	r5, #0
 8003c3e:	4606      	mov	r6, r0
 8003c40:	db01      	blt.n	8003c46 <_malloc_r+0x1a>
 8003c42:	42a9      	cmp	r1, r5
 8003c44:	d903      	bls.n	8003c4e <_malloc_r+0x22>
 8003c46:	230c      	movs	r3, #12
 8003c48:	6033      	str	r3, [r6, #0]
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c4e:	f000 f87d 	bl	8003d4c <__malloc_lock>
 8003c52:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <_malloc_r+0xac>)
 8003c54:	680a      	ldr	r2, [r1, #0]
 8003c56:	4614      	mov	r4, r2
 8003c58:	b99c      	cbnz	r4, 8003c82 <_malloc_r+0x56>
 8003c5a:	4f20      	ldr	r7, [pc, #128]	; (8003cdc <_malloc_r+0xb0>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b923      	cbnz	r3, 8003c6a <_malloc_r+0x3e>
 8003c60:	4621      	mov	r1, r4
 8003c62:	4630      	mov	r0, r6
 8003c64:	f000 f862 	bl	8003d2c <_sbrk_r>
 8003c68:	6038      	str	r0, [r7, #0]
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f000 f85d 	bl	8003d2c <_sbrk_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d123      	bne.n	8003cbe <_malloc_r+0x92>
 8003c76:	230c      	movs	r3, #12
 8003c78:	4630      	mov	r0, r6
 8003c7a:	6033      	str	r3, [r6, #0]
 8003c7c:	f000 f86c 	bl	8003d58 <__malloc_unlock>
 8003c80:	e7e3      	b.n	8003c4a <_malloc_r+0x1e>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	1b5b      	subs	r3, r3, r5
 8003c86:	d417      	bmi.n	8003cb8 <_malloc_r+0x8c>
 8003c88:	2b0b      	cmp	r3, #11
 8003c8a:	d903      	bls.n	8003c94 <_malloc_r+0x68>
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	441c      	add	r4, r3
 8003c90:	6025      	str	r5, [r4, #0]
 8003c92:	e004      	b.n	8003c9e <_malloc_r+0x72>
 8003c94:	6863      	ldr	r3, [r4, #4]
 8003c96:	42a2      	cmp	r2, r4
 8003c98:	bf0c      	ite	eq
 8003c9a:	600b      	streq	r3, [r1, #0]
 8003c9c:	6053      	strne	r3, [r2, #4]
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 f85a 	bl	8003d58 <__malloc_unlock>
 8003ca4:	f104 000b 	add.w	r0, r4, #11
 8003ca8:	1d23      	adds	r3, r4, #4
 8003caa:	f020 0007 	bic.w	r0, r0, #7
 8003cae:	1ac2      	subs	r2, r0, r3
 8003cb0:	d0cc      	beq.n	8003c4c <_malloc_r+0x20>
 8003cb2:	1a1b      	subs	r3, r3, r0
 8003cb4:	50a3      	str	r3, [r4, r2]
 8003cb6:	e7c9      	b.n	8003c4c <_malloc_r+0x20>
 8003cb8:	4622      	mov	r2, r4
 8003cba:	6864      	ldr	r4, [r4, #4]
 8003cbc:	e7cc      	b.n	8003c58 <_malloc_r+0x2c>
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d0e3      	beq.n	8003c90 <_malloc_r+0x64>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 f82e 	bl	8003d2c <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d1dd      	bne.n	8003c90 <_malloc_r+0x64>
 8003cd4:	e7cf      	b.n	8003c76 <_malloc_r+0x4a>
 8003cd6:	bf00      	nop
 8003cd8:	200000dc 	.word	0x200000dc
 8003cdc:	200000e0 	.word	0x200000e0

08003ce0 <_realloc_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	b921      	cbnz	r1, 8003cf4 <_realloc_r+0x14>
 8003cea:	4611      	mov	r1, r2
 8003cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cf0:	f7ff bf9c 	b.w	8003c2c <_malloc_r>
 8003cf4:	b922      	cbnz	r2, 8003d00 <_realloc_r+0x20>
 8003cf6:	f7ff ff4d 	bl	8003b94 <_free_r>
 8003cfa:	4625      	mov	r5, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d00:	f000 f830 	bl	8003d64 <_malloc_usable_size_r>
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d20f      	bcs.n	8003d28 <_realloc_r+0x48>
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f7ff ff8e 	bl	8003c2c <_malloc_r>
 8003d10:	4605      	mov	r5, r0
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0f2      	beq.n	8003cfc <_realloc_r+0x1c>
 8003d16:	4631      	mov	r1, r6
 8003d18:	4622      	mov	r2, r4
 8003d1a:	f7ff ff13 	bl	8003b44 <memcpy>
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4638      	mov	r0, r7
 8003d22:	f7ff ff37 	bl	8003b94 <_free_r>
 8003d26:	e7e9      	b.n	8003cfc <_realloc_r+0x1c>
 8003d28:	4635      	mov	r5, r6
 8003d2a:	e7e7      	b.n	8003cfc <_realloc_r+0x1c>

08003d2c <_sbrk_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4d05      	ldr	r5, [pc, #20]	; (8003d48 <_sbrk_r+0x1c>)
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fd fa7e 	bl	8001238 <_sbrk>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_sbrk_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_sbrk_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	200003b4 	.word	0x200003b4

08003d4c <__malloc_lock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__malloc_lock+0x8>)
 8003d4e:	f000 b811 	b.w	8003d74 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	200003bc 	.word	0x200003bc

08003d58 <__malloc_unlock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__malloc_unlock+0x8>)
 8003d5a:	f000 b80c 	b.w	8003d76 <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	200003bc 	.word	0x200003bc

08003d64 <_malloc_usable_size_r>:
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f18      	subs	r0, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbc      	itt	lt
 8003d6e:	580b      	ldrlt	r3, [r1, r0]
 8003d70:	18c0      	addlt	r0, r0, r3
 8003d72:	4770      	bx	lr

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <_init>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr

08003d84 <_fini>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr
